{"version":3,"file":"pages/account/index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAYA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAlBA;AAAA;AAAA;AAAA;AAmBA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAtCA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAiCA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AAGA;AAEA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;ACpOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://wechat-app-hrbust/._src_pages_account_index.tsx","webpack://wechat-app-hrbust/./src/pages/account/index.tsx?5554"],"sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Taro from '@tarojs/taro'\nimport { View, Image, OpenData, Text, Button } from '@tarojs/components'\nimport { IRootState } from '@/types'\nimport { goPage, routes } from '@/utils/router'\nimport { logout, init, getUnreadCount } from '@/redux/actions/user'\nimport { Dispatch, bindActionCreators } from 'redux'\nimport { cError, toLogin } from '@/utils'\nimport Avatar from '@/components/Avatar'\nimport arrowRight from '@/assets/icon/arrow_right.png'\nimport { AtButton, AtIcon } from 'taro-ui'\nimport authIcon from './res/authentication.png'\nimport removeBindingIcon from './res/remove_binding.png'\nimport contactIcon from './res/contact.png'\nimport myWallIcon from './res/my_wall.png'\nimport mySaleWallIcon from './res/my_sale_wall.png'\nimport myMessageIcon from './res/my_message.png'\n// images\n\nimport './index.less'\n\ntype PropsFromState = ReturnType<typeof mapStateToProps>\n\ntype PropsFromDispatch = ReturnType<typeof mapDispatchToProps>\n\ntype PageOwnProps = {}\n\ntype PageState = {\n  version: string\n}\n\ntype IProps = PropsFromState & PropsFromDispatch & PageOwnProps\n\nclass Account extends Component<IProps, PageState> {\n  state = {\n    version: '1.0.0',\n  }\n\n  componentDidShow() {\n    const { miniProgram } = Taro.getAccountInfoSync() || {}\n    this.setState({\n      version: miniProgram.version,\n    })\n    this.props.getUnreadCount()\n  }\n\n  onLoad() {}\n\n  // 登出\n  logout = () => {\n    Taro.showModal({\n      title: '确定要解绑学号？',\n      content: '解绑学号将删除当前学号的部分信息，需要重新绑定拉取~',\n      success: async (res) => {\n        if (res.confirm) {\n          Taro.showLoading({\n            title: '加载中...',\n          })\n          const [err] = await cError(this.props.logout())\n          Taro.hideLoading()\n          if (!err) {\n            Taro.reLaunch({\n              url: routes.index,\n              success: () => {\n                // 解绑 session 也会失效，需要重新登录\n                // TODO 后续需要优化后端逻辑，此时不应该失效，只做解绑操作即可\n                this.props.init()\n              },\n            })\n          }\n        }\n      },\n    })\n  }\n\n  onEditUserInfoClick = () => {\n    goPage(routes.accountEdit)\n  }\n\n  // onTest = () => {\n  //   wx.requestSubscribeMessage({\n  //     tmplIds: ['g0WWyXyMj-fU7kscwpXU89Q_Ola7sfJgIjKv7CdIVIc']\n  //   })\n  // }\n\n  render() {\n    const {\n      user: {\n        isLogin,\n        isWechatLogin,\n        studentInfo,\n        userInfo: {\n          avatarUrl = '',\n          nickName = '',\n          customAvatarUrl,\n          customName = '',\n        },\n        unreadCount,\n      },\n    } = this.props\n    const { version } = this.state\n\n    return (\n      <View className=\"account-container\">\n        {/* <View onClick={this.onTest}>开启订阅消息</View> */}\n        <View className=\"user\">\n          <View className=\"avatar-wrapper\">\n            {isWechatLogin ? (\n              <Avatar\n                className=\"avatar\"\n                avatarSize=\"150rpx\"\n                avatarUrl={avatarUrl}\n                customAvatarUrl={customAvatarUrl}\n                onClickType=\"preview\"\n              ></Avatar>\n            ) : (\n              <OpenData\n                className=\"avatar\"\n                type=\"userAvatarUrl\"\n                lang=\"zh_CN\"\n              ></OpenData>\n            )}\n          </View>\n          <View className=\"info\">\n            <View className=\"name\">\n              {/* <OpenData type=\"userNickName\" lang=\"zh_CN\"></OpenData> */}\n              <Text>{customName || nickName}</Text>\n              {/* <Text user-select className=\"username\">\n                {studentInfo.username}\n              </Text> */}\n              <AtIcon\n                value=\"edit\"\n                className=\"edit\"\n                size={18}\n                onClick={this.onEditUserInfoClick}\n              ></AtIcon>\n            </View>\n            <View className=\"student\">\n              <Image className=\"image\" src={authIcon} />\n              <View>{studentInfo?.name}</View>\n            </View>\n          </View>\n        </View>\n        {!isWechatLogin && (\n          <AtButton\n            type=\"primary\"\n            className=\"login-button\"\n            onClick={() => toLogin(isWechatLogin, routes.login)}\n          >\n            立即登录\n          </AtButton>\n        )}\n\n        {isWechatLogin && !isLogin && (\n          <AtButton\n            type=\"primary\"\n            className=\"login-button\"\n            onClick={() => toLogin(isWechatLogin, routes.login)}\n          >\n            绑定学号\n          </AtButton>\n        )}\n        <View className=\"other\">\n          {isLogin && (\n            <View className=\"item\" onClick={this.logout}>\n              <Image className=\"image\" src={removeBindingIcon} />\n              <View className=\"info\">\n                <View>解除绑定</View>\n                <Image className=\"arrow-right\" src={arrowRight} />\n              </View>\n            </View>\n          )}\n          <Button\n            className=\"item button\"\n            onClick={() => goPage(routes.message)}\n          >\n            <Image className=\"image\" src={myMessageIcon} />\n            <View className=\"info\">\n              <View className=\"title\">\n                <View>我的消息</View>\n                {unreadCount > 0 && (\n                  <View className=\"count\">{unreadCount}条新消息</View>\n                )}\n              </View>\n\n              <Image className=\"arrow-right\" src={arrowRight} />\n            </View>\n          </Button>\n          <Button className=\"item button\" onClick={() => goPage(routes.myWall)}>\n            <Image className=\"image\" src={myWallIcon} />\n            <View className=\"info\">\n              <View>我的表白</View>\n              <Image className=\"arrow-right\" src={arrowRight} />\n            </View>\n          </Button>\n          <Button\n            className=\"item button\"\n            onClick={() => goPage(routes.mySaleWall)}\n          >\n            <Image className=\"image\" src={mySaleWallIcon} />\n            <View className=\"info\">\n              <View>我的舍友</View>\n              <Image className=\"arrow-right\" src={arrowRight} />\n            </View>\n          </Button>\n          <Button className=\"item button\" open-type=\"contact\">\n            <Image className=\"image\" src={contactIcon} />\n            <View className=\"info\">\n              <View>联系阿喵</View>\n              <Image className=\"arrow-right\" src={arrowRight} />\n            </View>\n          </Button>\n        </View>\n\n        {version && <View className=\"version\">@理工喵 v{version}</View>}\n      </View>\n    )\n  }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n  user: state.user,\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators({ logout, init, getUnreadCount }, dispatch)\n\nexport default connect<PropsFromState, PropsFromDispatch, PageOwnProps>(\n  mapStateToProps,\n  mapDispatchToProps\n)(Account)\n","import { createPageConfig } from '@tarojs/runtime'\nimport component from \"../../../../../node_modules/.pnpm/babel-loader@8.2.1_@babel+core@7.26.9_webpack@5.78.0_@swc+core@1.3.23_/node_modules/babel-loader/lib/index.js??ruleSet[1].rules[5].use[0]!./index.tsx\"\nvar config = {\"navigationBarTitleText\":\"校园\"};\n\n\nvar inst = Page(createPageConfig(component, 'pages/account/index', {root:{cn:[]}}, config || {}))\n\n\nexport default component\n"],"names":[],"sourceRoot":""}