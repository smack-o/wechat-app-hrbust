{"version":3,"file":"pages2/course-term/index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AAAA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AAaA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAAA;AAKA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA7KA;AAAA;AAAA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+KA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;ACnSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://wechat-app-hrbust/._src_pages2_course-term_index.tsx","webpack://wechat-app-hrbust/./src/pages2/course-term/index.tsx?8819"],"sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Taro from '@tarojs/taro'\nimport { View, Picker, Image } from '@tarojs/components'\nimport { IRootState } from '@/types'\nimport { routes } from '@/utils/router'\nimport errorIcon from '@/assets/icon/error_icon.png'\nimport { Loading, CaptchaModal } from '@/components'\nimport { cError, showToast } from '@/utils'\nimport request from '@/utils/request'\nimport infoIcon from '@/assets/icon/icon_info.png'\nimport { setCurrentTerm } from '@/redux/actions/user'\nimport { Dispatch, bindActionCreators } from 'redux'\n\nimport checkIcon from './res/check.png'\n\n// images\nimport './index.less'\n\ntype PropsFromState = ReturnType<typeof mapStateToProps>\n\ntype PropsFromDispatch = ReturnType<typeof mapDispatchToProps>\n\ntype PageOwnProps = {}\n\ntype PageState = {\n  isShowCaptchaModal: boolean,\n  captchaImage: string,\n  hasCourseTerms: any[],\n  loading: boolean,\n  // choiceTerm: number,\n}\n\ntype IProps = PropsFromState & PropsFromDispatch & PageOwnProps\n\nclass CourseTerm extends Component<IProps, PageState> {\n  state: Readonly<PageState> = {\n    isShowCaptchaModal: false,\n    captchaImage: '',\n    hasCourseTerms: [],\n    loading: false,\n    // choiceTerm: 0,\n  }\n\n  terms = [\n    {id: 0, label: '大一第一学期'},\n    {id: 1, label: '大一第二学期'},\n    {id: 2, label: '大二第一学期'},\n    {id: 3, label: '大二第二学期'},\n    {id: 4, label: '大三第一学期'},\n    {id: 5, label: '大三第二学期'},\n    {id: 6, label: '大四第一学期'},\n    {id: 7, label: '大四第二学期'},\n    {id: 8, label: '大五第一学期'},\n    {id: 9, label: '大五第二学期'}\n  ]\n\n  chooseTerm = 0\n\n  termMap = ['大一', '大二', '大三', '大四']\n\n  async onLoad(e) {\n    // this.setState({\n    //   choiceTerm: e.term,\n    // })\n\n    this.setLoading(true)\n    await cError(this.getHasCourseTerms())\n    this.setLoading(false)\n  }\n\n  setTerm = (e: TaroBaseEventOrig) => {\n    this.props.setCurrentTerm(e.currentTarget.dataset.termid)\n    Taro.navigateBack()\n  }\n\n  setLoading = (loading: boolean) => {\n    this.setState({ loading })\n  }\n\n\n  changeTerm = async (event) => {\n    this.chooseTerm = event.detail.value\n    this.createNewTermHandler(event.detail.value)\n  }\n\n  createNewTermHandler = async (term: number, captcha = '') => {\n    this.setLoading(true)\n\n    const [createNewTermError] = await cError(this.createNewTerm(term, captcha))\n    if (createNewTermError) {\n      this.setLoading(false)\n      return\n    }\n\n    const [getHasCourseTermsError] = await cError(this.getHasCourseTerms())\n    this.setLoading(false)\n    if (getHasCourseTermsError) return\n\n    this.props.setCurrentTerm(term)\n\n    this.setLoading(false)\n    showToast({\n      title: '成功创建学期',\n      icon: 'success',\n      complete: () => {\n        Taro.navigateBack()\n      }\n    })\n\n  }\n\n  // 创建新学期\n  createNewTerm = async (term: number, captcha = '') => {\n    if (term === undefined) return\n    const reqData = { term, captcha }\n\n    const [err, res] = await cError(request({\n      url: '/api/hrbust/updateCourse',\n      data: reqData\n    }))\n\n    const { status } = res\n\n    if (status === 404) {\n      Taro.showToast({\n        title: '课表为空',\n        image: infoIcon,\n        duration: 1000\n      })\n      return Promise.reject('课表为空')\n    }\n\n    // 用户名密码错误需要重新登录\n    if (status === 400006) {\n      Taro.showModal({\n        title: '账号密码错误',\n        content: '可能是您近期更改教务在线密码了，是否重新登录？',\n        success(r) {\n          if (r.confirm) {\n            Taro.reLaunch({\n              url: routes.login\n            })\n            // console.log('用户点击确定')\n          } else if (r.cancel) {\n            // console.log('用户点击取消')\n            Taro.switchTab({\n              url: routes.index\n            })\n          }\n        }\n      })\n      return Promise.reject('账号密码错误')\n    }\n\n    // 登录失效，需要输入验证码\n    if (res.status === 400005) {\n      this.showCaptchaModal(res.data.captcha)\n      return Promise.reject('登录失效，需要输入验证码')\n    }\n\n    // 错误验证码\n    if (res.status === 400001) {\n      showToast({\n        title: '验证码输入错误，请重新输入',\n        complete: () => {\n          this.showCaptchaModal(res.data.captcha)\n        }\n      })\n      return Promise.reject('验证码输入错误，请重新输入')\n    }\n\n    if (err) {\n      Taro.showToast({\n        title: '抓取课表失败',\n        image: errorIcon,\n        duration: 1000\n      })\n      return Promise.reject('抓取课表失败')\n    }\n\n    return Promise.resolve(res)\n  }\n\n  // setTerm (event) {\n  //   this.methods.setTempTerm(event.currentTarget.dataset.termid)\n  // }\n\n  getHasCourseTerms = async () => {\n    const [err, res] = await cError(request({\n      url: '/api/hrbust/getHasCourseTerms'\n    }))\n    if (err) {\n      this.setLoading(false)\n      Taro.showToast({\n        title: '获取学期列表失败',\n        image: errorIcon,\n        duration: 1000\n      })\n      return Promise.reject('获取学期列表失败')\n    }\n\n    this.setState({\n      hasCourseTerms: res.data\n    })\n  }\n\n  // 验证码弹窗确认\n  onCaptchaModalSubmit = async (captcha: string) => {\n    this.setState({\n      isShowCaptchaModal: false,\n    })\n    await this.createNewTermHandler(this.chooseTerm, captcha)\n    this.getHasCourseTerms()\n  }\n\n  // 同步课程表\n  syncCourse = async (captcha = '') => {\n    this.setLoading(true)\n\n    const [createNewTermError] = await cError(this.createNewTerm(this.props.currentTerm, captcha))\n\n    this.setLoading(false)\n    if (createNewTermError) {\n      return\n    }\n  }\n\n  // 展示验证码弹窗\n  showCaptchaModal = (captcha: string) => {\n    this.setState({\n      captchaImage: captcha,\n      isShowCaptchaModal: true,\n    })\n  }\n\n  render () {\n    const { loading, hasCourseTerms, captchaImage, isShowCaptchaModal } = this.state\n    const { currentTerm: choiceTerm } = this.props\n    console.log(hasCourseTerms, 'hasCourseTerms')\n    if (loading) {\n      return <Loading loading />\n    }\n    return (\n      <View className=\"course-term-page\">\n        <CaptchaModal captchaImage={captchaImage} onSubmit={this.onCaptchaModalSubmit} isOpened={isShowCaptchaModal}></CaptchaModal>\n        <View className=\"container\">\n          {\n            Object.keys(hasCourseTerms).map((index) => {\n              const item = hasCourseTerms[index]\n              return <View className=\"grade\" key={index}>\n                {\n                  item.first == 1 && <View className=\"term-card\" data-termid={+index * 2} onClick={this.setTerm}>\n                    <View className=\"text\">{this.termMap[index]}第1学期</View>\n                    <View className=\"icon\">\n                      {\n                        choiceTerm == +index * 2 && <Image className=\"check\" src={checkIcon}></Image>\n                      }\n                    </View>\n                  </View>\n                }\n                {\n                  item.second == 1 && <View className=\"term-card\" data-termid={+index * 2 + 1} onClick={this.setTerm}>\n                    <View className=\"text\">{this.termMap[index]}第2学期</View>\n                    <View className=\"icon\">\n                      {\n                        choiceTerm == +index * 2 + 1 && <Image className=\"check\" src={checkIcon}></Image>\n                      }\n                    </View>\n                  </View>\n                }\n              </View>\n            })\n          }\n          <Picker mode=\"selector\" rangeKey=\"label\" value={this.chooseTerm} onChange={this.changeTerm} range={this.terms}>\n            <View className=\"button\">+ 创建新学期</View>\n          </Picker>\n        </View>\n      </View>\n    )\n  }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n  user: state.user,\n  currentTerm: state.user.currentTerm\n})\n\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators({ setCurrentTerm }, dispatch)\n\nexport default connect<PropsFromState, PropsFromDispatch, PageOwnProps>(mapStateToProps, mapDispatchToProps)(CourseTerm)\n","import { createPageConfig } from '@tarojs/runtime'\nimport component from \"../../../../../node_modules/.pnpm/babel-loader@8.2.1_@babel+core@7.26.9_webpack@5.78.0_@swc+core@1.3.23_/node_modules/babel-loader/lib/index.js??ruleSet[1].rules[5].use[0]!./index.tsx\"\nvar config = {\"navigationBarTitleText\":\"选择学期\"};\n\n\nvar inst = Page(createPageConfig(component, 'pages2/course-term/index', {root:{cn:[]}}, config || {}))\n\n\nexport default component\n"],"names":[],"sourceRoot":""}