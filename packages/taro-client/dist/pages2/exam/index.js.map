{"version":3,"file":"pages2/exam/index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAcoEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAmBA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAGA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;ACjLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://wechat-app-hrbust/._src_pages2_exam_index.tsx","webpack://wechat-app-hrbust/./src/pages2/exam/index.tsx?9c7f"],"sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { connect } from 'react-redux'\nimport { View, Ad } from '@tarojs/components'\nimport Taro from '@tarojs/taro'\nimport { IRootState } from '@/types'\nimport cn from 'classnames'\nimport { Dispatch, bindActionCreators } from 'redux'\nimport { getExams } from '@/redux/actions/user'\nimport { Loading, CaptchaModal } from '@/components'\nimport { cError, showToast } from '@/utils'\nimport { routes } from '@/utils/router'\n\nimport './index.less'\n\ntype PropsFromState = ReturnType<typeof mapStateToProps>\n\n\ntype PropsFromDispatch = ReturnType<typeof mapDispatchToProps>\n\ntype PageOwnProps = {}\n\ntype PageState = {\n  loading: boolean\n  captchaImage: string\n  isShowCaptchaModal: boolean\n}\n\ntype IProps = PropsFromState & PropsFromDispatch & PageOwnProps\n\nclass Exam extends Component<IProps, PageState> {\n  state: Readonly<PageState> = {\n    loading: false,\n    captchaImage: '',\n    isShowCaptchaModal: false,\n  }\n\n  pageNo = 1\n\n  async onLoad() {\n    await this.getList()\n    if (this.props.user.exams.length === 0) {\n      Taro.showToast({\n        title: '没有拉取到数据~请稍后重试',\n        icon: 'none'\n      })\n    }\n  }\n\n  // 拉取数据、错误处理等\n  getList = async (captcha = '') => {\n    // this.loading = true\n    this.setLoading(true)\n    const [, res] = await cError(this.props.getExams(this.pageNo, captcha))\n    this.setLoading(false)\n\n    // 登录失效，需要输入验证码\n    if (res.status === 400005) {\n      this.showCaptchaModal(res.data.captcha)\n      return\n    }\n\n    // 错误验证码\n    if (res.status === 400001) {\n      showToast({\n        title: '验证码输入错误，请重新输入',\n        complete: () => {\n          this.showCaptchaModal(res.data.captcha)\n        }\n      })\n      return\n    }\n    // 用户名密码错误需要重新登录\n    if (res.status === 400006) {\n      Taro.showModal({\n        title: '账号密码错误',\n        content: '可能是您近期更改教务在线密码了，是否重新登录？',\n        success (mRes) {\n          if (mRes.confirm) {\n            // console.log('用户点击确定')\n            Taro.reLaunch({\n              url: routes.login\n            })\n          } else if (res.cancel) {\n            // console.log('用户点击取消')\n            Taro.switchTab({\n              url: routes.index\n            })\n          }\n        }\n      })\n      return\n    }\n\n    if (this.pageNo > 1 && res.data.length === 0) {\n      showToast({\n        title: '喵，已经到底了~',\n        icon: 'none',\n        duration: 2000\n      })\n      this.pageNo -= 1\n    }\n  }\n\n  // loading\n  setLoading = (loading: boolean) => this.setState({ loading })\n\n  // 上拉加载\n  onReachBottom() {\n    if (!this.state.loading) {\n      this.pageNo += 1\n      this.getList()\n    }\n  }\n\n  // 展示验证码弹窗\n  showCaptchaModal = (captcha: string) => {\n    this.setState({\n      captchaImage: captcha,\n      isShowCaptchaModal: true,\n    })\n  }\n\n  // 验证码弹窗确认\n  onCaptchaModalSubmit = (captcha: string) => {\n    this.setState({\n      isShowCaptchaModal: false,\n    })\n    this.getList(captcha)\n  }\n\n  render () {\n    const { user: { exams } } = this.props\n    const { loading, captchaImage, isShowCaptchaModal } = this.state\n\n    return (\n      <Fragment>\n        <CaptchaModal captchaImage={captchaImage} onSubmit={this.onCaptchaModalSubmit} isOpened={isShowCaptchaModal}></CaptchaModal>\n        <Loading loading={loading}></Loading>\n        <View className=\"exam-page\">\n          {\n            exams.map((item, index) => {\n              return <Fragment key={item.date + item.course}>\n                {index > 0 && exams[index - 1].ending !== exams[index].ending\n                  && <Ad className=\"advertising\" unitId=\"adunit-20521f8411ad8419\"></Ad>}\n                <View className={cn('news-item', { ending: item.ending })}>\n                  <View className=\"news-wrapper\">\n                    <View className=\"news-message\">\n                      <View className=\"flex-box\">\n                        <View className=\"date\">{item.date}</View>\n                        <View className=\"time\">{item.time}</View>\n                      </View>\n                      <View className=\"flex-box\">\n                        <View className=\"course\">{item.course}</View>\n                        <View className=\"dateExtend\">{item.dateExtend}</View>\n                      </View>\n                      <View className=\"flex-box align-right\">\n                        <View className=\"position\">{item.position}</View>\n                        <View className={cn('info', { 'text-red': item.info === '重考'})}>{item.info}</View>\n                      </View>\n                    </View>\n                  </View>\n                </View>\n              </Fragment>\n            })\n          }\n        </View>\n      </Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n  user: state.user,\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators({ getExams }, dispatch)\n\nexport default connect<PropsFromState, PropsFromDispatch, PageOwnProps>(mapStateToProps, mapDispatchToProps)(Exam)\n","import { createPageConfig } from '@tarojs/runtime'\nimport component from \"../../../../../node_modules/.pnpm/babel-loader@8.2.1_@babel+core@7.26.9_webpack@5.78.0_@swc+core@1.3.23_/node_modules/babel-loader/lib/index.js??ruleSet[1].rules[5].use[0]!./index.tsx\"\nvar config = {\"navigationBarTitleText\":\"考试\"};\n\n\nvar inst = Page(createPageConfig(component, 'pages2/exam/index', {root:{cn:[]}}, config || {}))\n\n\nexport default component\n"],"names":[],"sourceRoot":""}