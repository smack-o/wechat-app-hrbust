{"version":3,"file":"pages3/account-edit/index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAeA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAqBA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAHA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAbA;AAAA;AAAA;AAAA;AAcA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA7HA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAOA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+HA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAAA;AACA;AAGA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;;;;;;;;;;;;;AC5OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://wechat-app-hrbust/._src_pages3_account-edit_index.tsx","webpack://wechat-app-hrbust/./src/pages3/account-edit/index.tsx?b30d"],"sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { View, Input } from '@tarojs/components'\nimport { IRootState } from '@/types'\nimport { AtButton, AtImagePicker } from 'taro-ui'\nimport Taro from '@tarojs/taro'\nimport { APIS } from '@/services2'\nimport { getCdnUrl, showToast, uploadFileToServer, withRequest } from '@/utils'\nimport { File } from 'taro-ui/types/image-picker'\nimport { bindActionCreators, Dispatch } from 'redux'\nimport { updateUserInfo } from '@/redux/actions/user'\n\nimport './index.less'\n\ntype PropsFromState = ReturnType<typeof mapStateToProps>\ntype PropsFromDispatch = ReturnType<typeof mapDispatchToProps>\n\ntype PageOwnProps = {}\n\ntype PageState = {\n  name: string\n  files: (File & { uploaded?: boolean; isNotTmpFile?: boolean; id?: string })[]\n  fetching: boolean\n}\n\ntype IProps = PropsFromState & PropsFromDispatch & PageOwnProps\n\nconst prefix = 'account-edit'\nclass AccountEdit extends Component<IProps, PageState> {\n  state: PageState = {\n    name: '',\n    files: [],\n    fetching: false\n  }\n\n  avatar?: string\n\n  async componentDidMount() {\n    await this.props.user.getUserInfoPromise\n    const {\n      user: {\n        userInfo: { customName, nickName, customAvatarUrl, avatarUrl }\n      }\n    } = this.props\n\n    this.avatar = customAvatarUrl ? getCdnUrl(customAvatarUrl) : avatarUrl\n\n    this.setState({\n      name: customName || nickName || '',\n      files: this.avatar ? [{ url: this.avatar, uploaded: true }] : []\n    })\n  }\n\n  onInputChange = (key: keyof PageState, e) => {\n    const state = {\n      [key]: e.target.value\n    } as PageState\n    this.setState(state)\n  }\n\n  changeFetching = (fetching: boolean) => {\n    this.setState({\n      fetching\n    })\n  }\n\n  onSubmit = async () => {\n    const { name, files } = this.state\n\n    this.changeFetching(true)\n\n    let photos: string[] = []\n\n    if (files.length > 0 && files[0].url !== this.avatar) {\n      Taro.showLoading({\n        title: '上传图片中...'\n      })\n\n      try {\n        photos = await this.uploadFiles()\n      } catch (error) {\n        console.log(error, 'error')\n        Taro.hideLoading()\n        this.changeFetching(false)\n        return\n      }\n      Taro.hideLoading()\n    }\n\n    const [err, res] = await withRequest(APIS.UserApi.apiUserPut)({\n      customName: name || undefined,\n      customAvatarUrl: photos.length ? photos[0] : undefined\n    })\n\n    this.changeFetching(false)\n\n    if (!err && res?.userInfo) {\n      this.props.updateUserInfo({\n        userInfo: res.userInfo\n      })\n      showToast({\n        title: '修改成功',\n        icon: 'success',\n        finished: () => {\n          Taro.navigateBack()\n        }\n      })\n    }\n  }\n\n  uploadFiles = async () => {\n    const { files } = this.state\n\n    const promises = files.map(async file => {\n      if (!file.uploaded) {\n        file.uploaded = true\n        file.id = await uploadFileToServer({\n          url: file.url,\n          isNotTmpFile: file.isNotTmpFile\n        })\n      }\n      return file\n    })\n\n    const newFiles = await Promise.all(promises)\n\n    this.setState({\n      files: newFiles\n    })\n\n    return newFiles.reduce((pre, item) => {\n      if (item.id) {\n        pre.push(item.id)\n      }\n      return pre\n    }, [] as string[])\n  }\n\n  onFileChange = (files: File[]) => {\n    this.setState({\n      files\n    })\n  }\n\n  getUserInfo = () => {\n    wx.getUserProfile({\n      desc: '用于理工喵信息展示', // 声明获取用户个人信息后的用途，后续会展示在弹窗中，请谨慎填写\n      success: async res => {\n        console.log(res, 'res')\n        this.setState({\n          name: res.userInfo.nickName,\n          files: [{ url: res.userInfo.avatarUrl, isNotTmpFile: true }]\n        })\n        // const [err] = await withRequest(APIS.UserApi.apiUserWxLoginPost)({\n        //   iv: res.iv,\n        //   encryptedData: res.encryptedData\n        // })\n        // if (!err) {\n        //   goPage(routes.login)\n        // }\n      }\n    })\n  }\n\n  render() {\n    const { name, files, fetching } = this.state\n    return (\n      <View className={prefix}>\n        <View className={`${prefix}__form-item`}>\n          <View className={`${prefix}__form-item__title`}>\n            修改昵称({name.length}/10)\n          </View>\n          <Input\n            maxlength={10}\n            className={`${prefix}__form-item__input`}\n            placeholder=\"请输入新昵称(非必填)\"\n            value={name}\n            // @ts-ignore\n            type=\"nickname\"\n            onInput={e => this.onInputChange('name', e)}\n          ></Input>\n        </View>\n\n        <View className={`${prefix}__form-item`}>\n          <View className={`${prefix}__form-item__title`}>修改头像</View>\n          <View className={`${prefix}__form-item__picker`}>\n            <AtImagePicker\n              files={files}\n              onChange={this.onFileChange}\n              length={1}\n              count={1}\n              showAddBtn={files.length < 1}\n            ></AtImagePicker>\n          </View>\n          <View className={`${prefix}__form-item__image-picker-message`}>\n            <View>添加图片</View>\n            <View>({files.length}/1)</View>\n          </View>\n        </View>\n\n        <View className={`${prefix}__tips`}>\n          <View className={`${prefix}__tips-title`}>*关于头像与昵称</View>\n          社区内发言、点赞、评论均会使用头像、若您没有修改昵称与头像，则默认使用微信昵称与头像。\n        </View>\n        <View className={`${prefix}__buttons`}>\n          <AtButton\n            type=\"secondary\"\n            className={`${prefix}__button1`}\n            onClick={this.getUserInfo}\n          >\n            使用微信昵称头像\n          </AtButton>\n          <AtButton\n            type=\"primary\"\n            onClick={this.onSubmit}\n            className={`${prefix}__button`}\n            loading={fetching}\n            disabled={\n              !name && (files.length === 0 || files[0]?.url === this.avatar)\n            }\n          >\n            确认修改\n          </AtButton>\n        </View>\n      </View>\n    )\n  }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n  user: state.user\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators({ updateUserInfo }, dispatch)\n\nexport default connect<PropsFromState, PropsFromDispatch, PageOwnProps>(\n  mapStateToProps,\n  mapDispatchToProps\n)(AccountEdit)\n","import { createPageConfig } from '@tarojs/runtime'\nimport component from \"../../../../../node_modules/.pnpm/babel-loader@8.2.1_@babel+core@7.26.9_webpack@5.78.0_@swc+core@1.3.23_/node_modules/babel-loader/lib/index.js??ruleSet[1].rules[5].use[0]!./index.tsx\"\nvar config = {\"navigationBarTitleText\":\"发布表白墙\"};\n\n\nvar inst = Page(createPageConfig(component, 'pages3/account-edit/index', {root:{cn:[]}}, config || {}))\n\n\nexport default component\n"],"names":[],"sourceRoot":""}