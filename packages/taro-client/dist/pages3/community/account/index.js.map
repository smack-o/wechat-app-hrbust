{"version":3,"file":"pages3/community/account/index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAiBA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAJA;AAAA;AAMA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AANA;AAAA;AAQA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzHA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAyDA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;;ACzPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://wechat-app-hrbust/._src_pages3_community_account_index.tsx","webpack://wechat-app-hrbust/./src/pages3/community/account/index.tsx?f77c"],"sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { View, Image } from '@tarojs/components'\nimport Taro from '@tarojs/taro'\nimport { IRootState } from '@/types'\nimport { APIS } from '@/services2'\nimport { getCdnUrl, loginModal, withRequest } from '@/utils'\n\nimport Avatar, { NickName } from '@/components/Avatar'\nimport Time from '@/components/Time'\nimport { routes } from '@/app.config'\nimport { withShare } from '@/components'\nimport bgIcon from '@/assets/community-imgs/account_bg.png'\nimport BrickMessageList from '../_components/brick-message-list'\nimport MateMessageList from '../_components/mate-message-list'\nimport Tab from '../_components/tab'\nimport { ITabProps } from '../_components/tab/Tab'\n\nimport './index.less'\n\ntype PropsFromState = ReturnType<typeof mapStateToProps>\ntype PropsFromDispatch = {}\n\ntype PageOwnProps = {}\n\ntype PageState = {\n  brickList: GetApiResultType<typeof APIS.WallApi.apiWallListPublishGet>\n  mateList: GetApiResultType<typeof APIS.SaleWallApi.apiSaleWallListPublishGet>\n  hasNext: boolean\n  user?: GetApiResultType<typeof APIS.UserApi.apiUserGet>\n  activeTab: number\n}\n\ntype IProps = PropsFromState & PropsFromDispatch & PageOwnProps\n\nconst prefix = 'other-account'\n\nclass OtherAccount extends Component<IProps, PageState> {\n  state: PageState = {\n    brickList: [],\n    mateList: [],\n    hasNext: true,\n    activeTab: 0\n  }\n\n  id = ''\n  pageNum = 0\n  pageSize = 20\n  fetching = false\n\n  _shareOptions = {\n    title: '分享给你个人主页',\n    imageUrl: '',\n    path: routes.account\n  }\n\n  onShareAppMessage() {}\n  onShareTimeline() {}\n\n  fetchBrickList = async (reset?: boolean) => {\n    this.fetching = true\n    const [err, res] = await withRequest(APIS.WallApi.apiWallListPublishGet)({\n      pageNum: String(this.pageNum),\n      pageSize: String(this.pageSize),\n      id: this.id\n    })\n\n    this.fetching = false\n\n    if (err || !res) {\n      return Promise.reject()\n    }\n\n    this.setState({\n      brickList: reset ? res : this.state.brickList.concat(res),\n      hasNext: res.length === this.pageSize\n    })\n  }\n\n  fetchMateList = async (reset?: boolean) => {\n    this.fetching = true\n    const [err, res] = await withRequest(\n      APIS.SaleWallApi.apiSaleWallListPublishGet\n    )({\n      pageNum: String(this.pageNum),\n      pageSize: String(this.pageSize),\n      id: this.id\n    })\n\n    this.fetching = false\n\n    if (err || !res) {\n      return Promise.reject()\n    }\n\n    this.setState({\n      mateList: reset ? res : this.state.mateList.concat(res),\n      hasNext: res.length === this.pageSize\n    })\n  }\n\n  tabList = [\n    {\n      key: 'brick',\n      text: '他发布的表白墙',\n      api: this.fetchBrickList\n    },\n    {\n      key: 'mate',\n      text: '他发布的卖舍友',\n      api: this.fetchMateList\n    }\n  ]\n\n  async onLoad(e) {\n    await loginModal()\n    if (e.id) {\n      this.id = e.id\n      this.getUserInfo()\n      this.init()\n    }\n  }\n\n  getUserInfo = async () => {\n    const [err, res] = await withRequest(APIS.UserApi.apiUserGet)({\n      id: this.id\n    })\n\n    if (err) {\n      return\n    }\n\n    this.setState({\n      user: res\n    })\n\n    Taro.setNavigationBarTitle({\n      title: `${res?.userInfo?.customName || res?.userInfo?.nickName} 的主页`\n    })\n\n    this._shareOptions = {\n      title: `分享给你 ${res?.userInfo?.customName ||\n        res?.userInfo?.nickName} 的主页`,\n      imageUrl: getCdnUrl(res?.userInfo?.customAvatarUrl),\n      path: `${routes.otherAccount}?id=${this.id}`\n    }\n  }\n\n  init = async () => {\n    this.pageNum = 0\n    await this.tabList[this.state.activeTab].api(true)\n  }\n\n  onReachBottom = () => {\n    if (!this.state.hasNext || this.fetching) {\n      return\n    }\n    this.pageNum++\n    this.tabList[this.state.activeTab].api().catch(() => {\n      this.pageNum--\n    })\n  }\n\n  onPullDownRefresh = async () => {\n    await this.init()\n    Taro.stopPullDownRefresh()\n  }\n\n  onTabChange: ITabProps['onChange'] = async index => {\n    this.setState(\n      {\n        activeTab: index\n      },\n      () => {\n        this.init()\n      }\n    )\n  }\n\n  render() {\n    const { brickList, mateList, user, activeTab } = this.state\n\n    return (\n      <View className={prefix}>\n        <Image className={`${prefix}-bg`} src={bgIcon} mode=\"widthFix\"></Image>\n        <View className={`${prefix}-info`}>\n          <Avatar\n            className={`${prefix}-info__avatar`}\n            avatarSize=\"150rpx\"\n            customAvatarUrl={user?.userInfo?.customAvatarUrl}\n            avatarUrl={user?.userInfo?.avatarUrl}\n            onClickType=\"preview\"\n          ></Avatar>\n          <View className={`${prefix}-info__other`}>\n            <View className={`${prefix}-info__other-item`}>\n              <View>获赞</View>\n              <View>\n                {(user?.brickLikeCount || 0) +\n                  (user?.commentLikeCount || 0) +\n                  (user?.mateLikeCount || 0)}\n              </View>\n            </View>\n            <View className={`${prefix}-info__other-item`}>\n              <View>关注</View>\n              <View>暂未开放</View>\n            </View>\n            <View className={`${prefix}-info__other-item`}>\n              <View>粉丝</View>\n              <View>暂未开放</View>\n            </View>\n          </View>\n        </View>\n        <NickName\n          className={`${prefix}-nickname`}\n          customName={user?.userInfo?.customName}\n          nickName={user?.userInfo?.nickName}\n        ></NickName>\n        <View className={`${prefix}-info-line`}>\n          <View>用户加入时间：</View>\n          <Time time={user?.createdAt} type=\"relative\"></Time>\n        </View>\n        <View className={`${prefix}-info-line`}>\n          <View>签名：</View>\n          <View>暂未开放</View>\n        </View>\n\n        <View className={`${prefix}-border`}></View>\n\n        <Tab\n          currentIndex={activeTab}\n          tabList={this.tabList}\n          onChange={this.onTabChange}\n        >\n          {activeTab === 0 && (\n            <BrickMessageList list={brickList}></BrickMessageList>\n          )}\n          {activeTab === 1 && (\n            <MateMessageList list={mateList}></MateMessageList>\n          )}\n        </Tab>\n      </View>\n    )\n  }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n  user: state.user\n})\n\nexport default connect<PropsFromState, PropsFromDispatch, PageOwnProps>(\n  mapStateToProps\n)(withShare()(OtherAccount))\n","import { createPageConfig } from '@tarojs/runtime'\nimport component from \"../../../../../../node_modules/.pnpm/babel-loader@8.2.1_@babel+core@7.26.9_webpack@5.78.0_@swc+core@1.3.23_/node_modules/babel-loader/lib/index.js??ruleSet[1].rules[5].use[0]!./index.tsx\"\nvar config = {\"navigationBarTitleText\":\"个人中心\"};\ncomponent.enableShareTimeline = true\ncomponent.enableShareAppMessage = true\nvar inst = Page(createPageConfig(component, 'pages3/community/account/index', {root:{cn:[]}}, config || {}))\n\n\nexport default component\n"],"names":[],"sourceRoot":""}