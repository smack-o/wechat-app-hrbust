{"version":3,"file":"pages3/community/create-wall/index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAiBA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AALA;AAAA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAFA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;;ACvNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://wechat-app-hrbust/._src_pages3_community_create-wall_index.tsx","webpack://wechat-app-hrbust/./src/pages3/community/create-wall/index.tsx?adae"],"sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { View, Input, Textarea } from '@tarojs/components'\nimport { IRootState } from '@/types'\nimport { AtButton, AtImagePicker } from 'taro-ui'\nimport { goPage, routes } from '@/utils/router'\nimport Taro from '@tarojs/taro'\nimport { APIS } from '@/services2'\nimport {\n  requestSubscribeMessage,\n  showToast,\n  uploadFileToServer,\n  withRequest\n} from '@/utils'\nimport { File } from 'taro-ui/types/image-picker'\n\nimport './index.less'\n\ntype PropsFromState = ReturnType<typeof mapStateToProps>\ntype PropsFromDispatch = {}\n\ntype PageOwnProps = {}\n\ntype PageState = {\n  to: string\n  tel?: string\n  content: string\n  files: (File & { uploaded?: boolean; id?: string })[]\n  fetching: boolean\n}\n\ntype IProps = PropsFromState & PropsFromDispatch & PageOwnProps\n\nconst prefix = 'create-wall'\nclass CreateWall extends Component<IProps, PageState> {\n  state: PageState = {\n    to: '',\n    tel: '',\n    content: '',\n    files: [],\n    fetching: false\n  }\n\n  onInputChange = (key: keyof PageState, e) => {\n    const state = {\n      [key]: e.target.value\n    } as PageState\n    this.setState(state)\n  }\n\n  changeFetching = (fetching: boolean) => {\n    this.setState({\n      fetching\n    })\n  }\n\n  onSubmit = async () => {\n    const { to, tel, content, files } = this.state\n\n    await requestSubscribeMessage()\n\n    if (!content) {\n      Taro.showToast({\n        title: '请输入内容',\n        icon: 'none'\n      })\n      return\n    }\n\n    this.changeFetching(true)\n\n    let photos: string[] = []\n\n    if (files.length > 0) {\n      Taro.showLoading({\n        title: '上传图片中...'\n      })\n      try {\n        photos = await this.uploadFiles()\n      } catch (error) {\n        Taro.hideLoading()\n        this.changeFetching(false)\n        return\n      }\n      Taro.hideLoading()\n    }\n\n    const [err, res] = await withRequest(APIS.WallApi.apiWallPost)({\n      to,\n      tel,\n      content,\n      photos: photos.length ? photos : undefined\n    })\n\n    this.changeFetching(false)\n\n    if (!err && res?.id) {\n      showToast({\n        title: '发布成功',\n        icon: 'success',\n        finished: () => {\n          goPage(`${routes.wallDetail}?id=${res.id}`, Taro.redirectTo)\n        }\n      })\n    }\n  }\n\n  uploadFiles = async () => {\n    const { files } = this.state\n\n    const promises = files.map(async file => {\n      if (!file.uploaded) {\n        file.uploaded = true\n        file.id = await uploadFileToServer({\n          url: file.url\n        })\n      }\n      return file\n    })\n\n    const newFiles = await Promise.all(promises)\n\n    this.setState({\n      files: newFiles\n    })\n\n    return newFiles.reduce((pre, item) => {\n      if (item.id) {\n        pre.push(item.id)\n      }\n      return pre\n    }, [] as string[])\n  }\n\n  onFileChange = (files: File[]) => {\n    this.setState({\n      files\n    })\n  }\n\n  render() {\n    const { to, tel, content, files, fetching } = this.state\n    return (\n      <View className={prefix}>\n        <View className={`${prefix}__form-item`}>\n          <View className={`${prefix}__form-item__title`}>表白对象</View>\n          <Input\n            className={`${prefix}__form-item__input`}\n            placeholder=\"请输入表白对象名称(非必填)\"\n            value={to}\n            type=\"text\"\n            onInput={e => this.onInputChange('to', e)}\n          ></Input>\n        </View>\n\n        <View className={`${prefix}__form-item`}>\n          <View className={`${prefix}__form-item__title`}>表白对象手机号</View>\n          <Input\n            className={`${prefix}__form-item__input`}\n            placeholder=\"请输入表白对象手机号(非必填)\"\n            value={tel}\n            type=\"number\"\n            onInput={e => this.onInputChange('tel', e)}\n          ></Input>\n        </View>\n\n        <View className={`${prefix}__form-item`}>\n          <View className={`${prefix}__form-item__title`}>内容*</View>\n          <Textarea\n            className={`${prefix}__form-item__textarea`}\n            placeholder=\"请输入内容\"\n            value={content}\n            // type=\"text\"\n            autoHeight\n            maxlength={200}\n            onInput={e => this.onInputChange('content', e)}\n          ></Textarea>\n        </View>\n\n        <View className={`${prefix}__form-item`}>\n          <AtImagePicker\n            files={files}\n            onChange={this.onFileChange}\n            length={3}\n            count={9}\n            showAddBtn={files.length < 9}\n          ></AtImagePicker>\n          <View className={`${prefix}__form-item__image-picker-message`}>\n            <View>添加照片</View>\n            <View>({files.length}/9)</View>\n          </View>\n        </View>\n\n        <View className={`${prefix}__tips`}>\n          <View className={`${prefix}__tips-title`}>*关于表白墙</View>\n          表白墙不局限于表白，可以用来发日常内容，所以表白对象以及手机号都不是必填项。\n          您可选填您所表白的对象的手机号，在您提交表白信息后，系统会以短信的形式向他发送一则消息，通知TA登录该小程序查看您对TA的表白；TA只需登录该小程序在表白墙中搜索自己的手机号码即可查看表白信息。每天只能发送2条短信表白墙。\n        </View>\n        <AtButton\n          type=\"primary\"\n          onClick={this.onSubmit}\n          className={`${prefix}__button`}\n          loading={fetching}\n        >\n          发表\n        </AtButton>\n      </View>\n    )\n  }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n  user: state.user\n})\n\nexport default connect<PropsFromState, PropsFromDispatch, PageOwnProps>(\n  mapStateToProps\n)(CreateWall)\n","import { createPageConfig } from '@tarojs/runtime'\nimport component from \"../../../../../../node_modules/.pnpm/babel-loader@8.2.1_@babel+core@7.26.9_webpack@5.78.0_@swc+core@1.3.23_/node_modules/babel-loader/lib/index.js??ruleSet[1].rules[5].use[0]!./index.tsx\"\nvar config = {\"navigationBarTitleText\":\"发布表白墙\"};\n\n\nvar inst = Page(createPageConfig(component, 'pages3/community/create-wall/index', {root:{cn:[]}}, config || {}))\n\n\nexport default component\n"],"names":[],"sourceRoot":""}