{"version":3,"file":"pages3/community/message/index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAcA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAAA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAtCA;AACA;AAAA;AAAA;AAAA;AAwCA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;AC/FA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAPA;AASA;AACA;AACA;AAXA;AAaA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AAnBA;AAqBA;AACA;AACA;AAvBA;AAwBA;AAxBA;AA2BA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;AElHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://wechat-app-hrbust/._src_pages3_community_message_index.tsx","webpack://wechat-app-hrbust/._src_pages3_community__components_message-item_MessageItem.tsx","webpack://wechat-app-hrbust/._src_pages3_community__components_message-item_index.ts","webpack://wechat-app-hrbust/./src/pages3/community/message/index.tsx?5be6"],"sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { View } from '@tarojs/components'\nimport Taro from '@tarojs/taro'\nimport { IRootState } from '@/types'\nimport { APIS } from '@/services2'\nimport { withRequest } from '@/utils'\nimport MessageItem from '../_components/message-item'\nimport './index.less'\n\ntype PropsFromState = ReturnType<typeof mapStateToProps>\ntype PropsFromDispatch = {}\n\ntype PageOwnProps = {}\n\ntype PageState = {\n  list: GetApiResultType<typeof APIS.MessageApi.apiMessageListGet>\n  hasNext: boolean\n}\n\ntype IProps = PropsFromState & PropsFromDispatch & PageOwnProps\n\nconst prefix = 'message-page'\nclass Message extends Component<IProps, PageState> {\n  state: PageState = {\n    list: [],\n    hasNext: true\n  }\n\n  pageNum = 0\n  pageSize = 20\n  fetching = false\n\n  componentDidMount() {\n    this.init()\n  }\n\n  init = async () => {\n    this.pageNum = 0\n    await this.fetchList(true)\n  }\n\n  fetchList = async (reset?: boolean) => {\n    this.fetching = true\n    const [err, res] = await withRequest(APIS.MessageApi.apiMessageListGet)({\n      pageNum: String(this.pageNum),\n      pageSize: String(this.pageSize)\n    })\n\n    this.fetching = false\n\n    if (err || !res) {\n      return\n    }\n\n    this.setState({\n      list: reset ? res : this.state.list.concat(res),\n      hasNext: res.length === this.pageSize\n    })\n  }\n\n  onReachBottom = () => {\n    if (!this.state.hasNext || this.fetching) {\n      return\n    }\n    this.pageNum++\n    this.fetchList()\n  }\n\n  onPullDownRefresh = async () => {\n    await this.init()\n    Taro.stopPullDownRefresh()\n  }\n\n  render() {\n    const { list } = this.state\n\n    return (\n      <View className={prefix}>\n        {list.length === 0 ? (\n          <View className=\"community-no-data\">暂无消息</View>\n        ) : (\n          list.map(item => {\n            return <MessageItem key={item._id} data={item}></MessageItem>\n          })\n        )}\n      </View>\n    )\n  }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n  user: state.user\n})\n\nexport default connect<PropsFromState, PropsFromDispatch, PageOwnProps>(\n  mapStateToProps\n)(Message)\n","import React, { useCallback, useMemo } from 'react'\nimport { APIS } from '@/services2'\nimport { View, Image, Text } from '@tarojs/components'\nimport { goPage } from '@/utils/router'\nimport { routes } from '@/app.config'\nimport likeIcon from '@/assets/community-imgs/like.png'\nimport './MessageItem.less'\nimport ListItem from '../list-item'\n\ntype IProps = {\n  data: GetApiResultType<typeof APIS.MessageApi.apiMessageListGet>[0]\n}\n\nexport enum TypeEnum {\n  /**\n   * `BrickLike` 点赞表白墙\n   */\n  BrickLike = 'BrickLike' as any,\n  /**\n   * `MateLike` 点赞卖舍友\n   */\n  MateLike = 'MateLike' as any,\n  /**\n   * `MateLike` 点赞卖舍友\n   */\n  ResourceLike = 'ResourceLike' as any,\n  /**\n   * 点赞评论\n   */\n  CommentLike = 'CommentLike' as any,\n  /**\n   * `Comment` 点赞评论\n   */\n  Comment = 'Comment' as any,\n  /**\n   * `Hot` 热门\n   */\n  Hot = 'Hot' as any\n}\n\nconst prefix = 'message-item'\nexport default function MessageItem(props: IProps) {\n  const {\n    data: { from, ext, createdAt, type, isRead, content: contentText }\n  } = props\n\n  // TODO: 各种消息类型的展示逻辑\n  const content = useMemo(() => {\n    if (type === TypeEnum.BrickLike) {\n      return (\n        <View className={`${prefix}-center__content-detail`}>\n          <Image className=\"star-icon\" src={likeIcon}></Image>赞了你发布的表白墙\n        </View>\n      )\n    } else if (type === TypeEnum.MateLike) {\n      return (\n        <View className={`${prefix}-center__content-detail`}>\n          <Image className=\"star-icon\" src={likeIcon}></Image>赞了你发布的卖舍友\n        </View>\n      )\n    } else if (type === TypeEnum.ResourceLike) {\n      return (\n        <View className={`${prefix}-center__content-detail`}>\n          <Image className=\"star-icon\" src={likeIcon}></Image>赞了你发布的资源\n        </View>\n      )\n    } else if (type === TypeEnum.Comment) {\n      return (\n        <View className={`${prefix}-center__content-detail`}>\n          {contentText}\n        </View>\n      )\n    } else if (type === TypeEnum.CommentLike) {\n      return (\n        <View className={`${prefix}-center__content-detail`}>\n          <Image className=\"star-icon\" src={likeIcon}></Image>\n          {contentText}\n        </View>\n      )\n    }\n    return '您有一条新消息'\n  }, [contentText, type])\n\n  // TODO: 各种消息类型的跳转逻辑\n  const onMessageClick = useCallback(() => {\n    if (type === TypeEnum.BrickLike) {\n      goPage(`${routes.wallDetail}?id=${ext?.brickId}`)\n    } else if (type === TypeEnum.MateLike) {\n      goPage(`${routes.saleWallDetail}?id=${ext?.mateId}`)\n    } else if (type === TypeEnum.Comment || type === TypeEnum.CommentLike) {\n      if (ext?.brickId) {\n        goPage(`${routes.wallDetail}?id=${ext?.brickId}`)\n      } else if (ext?.mateId) {\n        goPage(`${routes.saleWallDetail}?id=${ext?.mateId}`)\n      } else if (ext?.resourceId) {\n        goPage(`${routes.resourceDetail}?id=${ext?.resourceId}`)\n      }\n    } else if (type === TypeEnum.Hot) {\n      // goPage(`${routes.mateDetail}?id=${ext?.mateId}`)\n    }\n  }, [ext, type])\n\n  return (\n    <ListItem\n      showDot={!isRead}\n      onClick={onMessageClick}\n      userInfo={from?.userInfo}\n      photo={ext?.photo}\n      content={content}\n      time={createdAt}\n      userId={from?._id}\n      userTags={from?.tags}\n    ></ListItem>\n  )\n}\n","export { default } from './MessageItem'\n","import { createPageConfig } from '@tarojs/runtime'\nimport component from \"../../../../../../node_modules/.pnpm/babel-loader@8.2.1_@babel+core@7.26.9_webpack@5.78.0_@swc+core@1.3.23_/node_modules/babel-loader/lib/index.js??ruleSet[1].rules[5].use[0]!./index.tsx\"\nvar config = {\"navigationBarTitleText\":\"消息列表\",\"enablePullDownRefresh\":true,\"backgroundTextStyle\":\"dark\"};\n\n\nvar inst = Page(createPageConfig(component, 'pages3/community/message/index', {root:{cn:[]}}, config || {}))\n\n\nexport default component\n"],"names":[],"sourceRoot":""}