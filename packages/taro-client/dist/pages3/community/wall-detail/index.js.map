{"version":3,"file":"pages3/community/wall-detail/index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAeA;;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAYA;AACA;AACA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAJA;AAAA;AAMA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAxIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AACA;AAAA;AAAA;AA2HA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;;;;;;;;;;;;;ACnNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://wechat-app-hrbust/._src_pages3_community_wall-detail_index.tsx","webpack://wechat-app-hrbust/./src/pages3/community/wall-detail/index.tsx?ff65"],"sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { connect } from 'react-redux'\nimport { View } from '@tarojs/components'\nimport Taro from '@tarojs/taro'\nimport { IRootState } from '@/types'\nimport { APIS } from '@/services2'\nimport { withRequest, showToast, loginModal, getCdnUrl } from '@/utils'\nimport { routes } from '@/app.config'\nimport { withShare } from '@/components'\nimport './index.less'\nimport WallItem from '../_components/wall-item'\nimport { CommentType } from '../_components/comment-input'\nimport CommentList from '../_components/comment-list'\n\ntype PropsFromState = ReturnType<typeof mapStateToProps>\ntype PropsFromDispatch = {}\n\ntype PageOwnProps = {}\n\ntype PageState = {\n  data: GetApiResultType<typeof APIS.WallApi.apiWallIdGet>\n  commentList: GetApiResultType<typeof APIS.CommentApi.apiCommentBrickIdGet>\n  hasNext: boolean\n}\n\ntype IProps = PropsFromState & PropsFromDispatch & PageOwnProps\n\nconst prefix = 'wall-detail'\n\n// @withShare({ title: '分享' })\n\nclass WallDetail extends Component<IProps, PageState> {\n  state: PageState = {\n    data: undefined,\n    commentList: [],\n    hasNext: true\n  }\n\n  id: string\n  pageNum = 0\n  pageSize = 20\n  fetching = false\n\n  async onLoad(e) {\n    await loginModal()\n    if (e.id) {\n      this.id = e.id\n      this.getData()\n      this.getComment()\n    }\n  }\n\n  _shareOptions = {\n    title: '分享了你一条表白墙',\n    imageUrl: '',\n    path: routes.community\n  }\n\n  onShareAppMessage() {}\n  onShareTimeline() {}\n\n  getData = async () => {\n    const [err, res] = await withRequest(APIS.WallApi.apiWallIdGet)({\n      id: this.id\n    })\n\n    if (!err && res) {\n      if (!res._id) {\n        // Taro.navigateBack()\n        showToast({\n          title: '该内容不存在或已被删除',\n          icon: 'none',\n          finished: () => {\n            Taro.navigateBack({\n              fail() {\n                Taro.switchTab({\n                  url: routes.index\n                })\n              }\n            })\n          }\n        })\n        return\n      }\n\n      this.setState({\n        data: res\n      })\n      this._shareOptions = {\n        title: '分享你一条表白墙',\n        imageUrl: getCdnUrl(res?.photos?.[0]),\n        path: routes.wallDetail + '?id=' + res._id\n      }\n    }\n  }\n\n  /**\n   *\n   * @param reset 是否重置\n   * @param refresh 是否刷新当前数据\n   * @returns\n   */\n  getComment = async (reset?: boolean, refresh?: boolean) => {\n    this.fetching = true\n    let pageNum = String(this.pageNum)\n    let pageSize = String(this.pageSize)\n\n    // 刷新当前数据\n    if (refresh) {\n      pageNum = '0'\n      pageSize = String((this.pageNum + 1) * this.pageSize)\n    }\n\n    const [err, res] = await withRequest(APIS.CommentApi.apiCommentBrickIdGet)({\n      id: this.id,\n      pageNum,\n      pageSize\n    })\n\n    this.fetching = false\n\n    if (err || !res) {\n      return\n    }\n\n    this.setState({\n      commentList:\n        reset || refresh ? res : (this.state.commentList || []).concat(res),\n      hasNext: res.length >= this.pageSize\n    })\n  }\n\n  // 评论\n  onCommentSubmit = async (value: string, to?: string, commentId?: string) => {\n    const { data } = this.state\n\n    if (!data) {\n      return\n    }\n\n    const params: Parameters<typeof APIS.CommentApi.apiCommentPost>[0] = {\n      brickId: data._id,\n      content: value,\n      to: data.publisher?._id,\n      type: CommentType.BrickComment\n    }\n    // 回复评论\n    if (commentId) {\n      params.to = to\n      params.type = CommentType.ReplyComment\n      params.commentId = commentId\n    }\n    const [err] = await withRequest(APIS.CommentApi.apiCommentPost)(params)\n\n    if (err) {\n      return Promise.reject()\n    }\n    Taro.showToast({\n      title: '评论成功',\n      icon: 'success'\n    })\n    this.getComment(false, true)\n    this.getData()\n  }\n\n  onReachBottom = () => {\n    if (!this.state.hasNext || this.fetching) {\n      return\n    }\n    this.pageNum++\n    return this.getComment().catch(() => {\n      this.pageNum--\n    })\n  }\n\n  onPullDownRefresh = async () => {\n    await this.getData()\n    this.getComment(true)\n    Taro.stopPullDownRefresh()\n  }\n\n  render() {\n    const { data, commentList = [] } = this.state\n\n    if (!data) {\n      return null\n    }\n    return (\n      <View className={prefix}>\n        <WallItem data={data} timeType=\"relative\" showDelete></WallItem>\n        <View className={`${prefix}__border-line`}></View>\n        <View className={`${prefix}__comment-list`}>\n          <CommentList\n            hotList={data.hotComments}\n            showInput\n            list={commentList}\n            onCommentSubmit={this.onCommentSubmit}\n            commentCount={data.commentCount}\n          ></CommentList>\n        </View>\n      </View>\n    )\n  }\n}\n\nconst mapStateToProps = (state: IRootState) => ({\n  user: state.user\n})\n\nexport default connect<PropsFromState, PropsFromDispatch, PageOwnProps>(\n  mapStateToProps\n)(withShare({ title: '分享了你一条表白墙' })(WallDetail))\n","import { createPageConfig } from '@tarojs/runtime'\nimport component from \"../../../../../../node_modules/.pnpm/babel-loader@8.2.1_@babel+core@7.26.9_webpack@5.78.0_@swc+core@1.3.23_/node_modules/babel-loader/lib/index.js??ruleSet[1].rules[5].use[0]!./index.tsx\"\nvar config = {\"navigationBarTitleText\":\"表白墙详情\",\"enablePullDownRefresh\":true,\"backgroundTextStyle\":\"dark\"};\ncomponent.enableShareTimeline = true\ncomponent.enableShareAppMessage = true\nvar inst = Page(createPageConfig(component, 'pages3/community/wall-detail/index', {root:{cn:[]}}, config || {}))\n\n\nexport default component\n"],"names":[],"sourceRoot":""}