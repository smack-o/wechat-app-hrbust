<template>
  <block>
    <block>
      <view class="wrap">
        <view class="refresh">更新课表请下拉刷新</view>
        <view wx:if="{{!doNotRefresh}}" class="picker-wrapper">
          <view class="wrapper-left">
          </view>
          <picker mode="selector" bindchange="changeWeek" value="{{slectedWeek}}" range="{{weeks}}">
            <view>
              <view>
                第<text class="num"> {{weeks.length > 0 ? weeks[slectedWeek] : 0}} </text>周
                <block wx-if="{{weeks[slectedWeek] == thisWeekNum}}">
                  (当前)
                </block>
              </view>
              <view>{{terms[currentTerm]}}</view>
            </view>
          </picker>
          <view class="wrapper-right {{selectOpen ? 'rotate' : ''}}" bindtap="selectListSwitch">+</view>
        </view>
        <view class="course-header">
          <view class="item">
            {{month}}月
          </view>
          <block wx:key="day" wx:for="{{dayNum}}" wx:for-item="dayItem" wx:for-index="dayIndex">
            <view class="item {{dayIndex + 1 === nowDayIndex ? 'now-day' : ''}}">
              <view>{{dayItem}}</view>
              <view>{{currentWeekList[dayIndex]}}日</view>
            </view>
          </block>
        </view>
        <view class="course-body">
        <view class="line-item" wx:key="time" wx:for="{{time}}" wx:for-index="timeIndex" wx:for-item="timeItem">
          <block wx:key="course-content" wx:for="{{[0,1,2,3,4,5,6,7]}}" wx:for-index="dayIndex">
              <block wx:if="{{dayIndex === 0}}">
                <!-- 左侧时间列表 -->
                <view class="item">
                  <view class="time-item">
                    <view>{{timeList[timeIndex][0]}}</view>
                    <view class="num">{{timeItem[0]}}</view>
                  </view>
                  <view class="time-item">
                    <view>{{timeList[timeIndex][1]}}</view>
                    <view class="num">{{timeItem[1]}}</view>
                  </view>
                </view>
              </block>
              <block wx:else>
                <!-- 课表内容 -->
                <view class="item" bindtap="detailHandler" data-dayIndex="{{dayIndex}}" data-timeIndex="{{timeItem[0]}}">
                  <view class="item-content">
                    <block wx:key="course" wx:for="{{courseData[timeItem[0]]}}">
                      <block wx:if="{{item.day == dayIndex}}">
                        <view class="this-week {{item.class}}" wx:if="{{item.period[thisWeek] == 1}}">
                          《{{item.name}}》@{{item.locale}}
                        </view>
                        <view class="no-this-week" wx:else>
                          《{{item.name}}》@{{item.locale}}
                        </view>
                      </block>
                    </block>
                  </view>
                </view>
              </block>
            </block>
        </view>
        </view>
      </view>
    </block>

    <!-- SelectList -->
    <view class="select-list" wx:if="{{selectOpen}}">
      <view class="empty-top" bindtap="selectListSwitch">
      </view>
      <view class="select-wrapper">
        <navigator url="./choiceTrem" class="select-item">
          <view class="select-text">选择学期</view>
          <view class="select-data">{{terms[currentTerm]}}</view>
          <view class="select-arrow"></view>
        </navigator>
        <picker mode="selector" bindchange="changeWeek" value="{{slectedWeek}}" range="{{weeks}}">
            <view class="select-item">
                <view class="select-text">选择周数</view>
                <view class="select-data">
                  第<text class="num"> {{weeks.length > 0 ? weeks[slectedWeek] : 0}} </text>周
                  <block wx-if="{{weeks[slectedWeek] == thisWeekNum}}">
                    (当前)
                  </block>
                </view>
                <view class="select-arrow"></view>
            </view>
        </picker>
        <button type="primary" bindtap="syncCourse">同步教务在线课表</button>
      </view>
      <view class="empty-bottom" bindtap="selectListSwitch">
      </view>
    </view>

    <!-- Detail -->
    <view class="detial" wx:if="{{detailOpen}}" bindtap="closeDetail">
      <block wx:for="{{detailData}}" wx:for-item="detailItem">
        <view class="{{detailItem.period[thisWeek] == 1 ? 'detial-current-week' : 'detail-not-current-week'}}">
          <view class="course-name">《{{detailItem.name}}》</view>
          <view>教室：{{detailItem.locale}}</view>
          <view>周数：{{detailItem.week}}</view>
          <view>节数：{{dayNum[detailItem.day - 1]}}{{detailItem.sectionstart}} ～ {{detailItem.sectionend}}节</view>
          <view>教师：{{detailItem.teacher}}</view>
        </view>
      </block>
    </view>
  </block>
</template>

<script>
  import wepy from 'wepy'
  import { connect } from 'wepy-redux'
  import { request } from 'utils'
  import courseMixin from '../mixins/course'
  import { setCurrentTerm } from '../store/actions'

  @connect({
    currentTerm (state) {
      return state.currentTerm.currentTerm
    },
    tempTerm (state) {
      return state.currentTerm.tempTerm
    },
    username (state) {
      return state.user.studentInfo.username
    }
  }, {
    setCurrentTerm
  })
  export default class Course extends wepy.page {
    data = {
      terms: ['大一 第1学期', '大一 第2学期', '大二 第1学期', '大二 第2学期', '大三 第1学期', '大三 第2学期', '大四 第1学期', '大四 第2学期'],
      weeks: [],
      slectedWeek: 0,
      thisWeek: 1,
      thisWeekNum: 1,
      nowDayIndex: new Date().getDay(),
      termId: 0,
      dayNum: ['周一', '周二', '周三', '周四', '周五', '周六', '周日'],
      time: [['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10']],
      month: new Date().getMonth() + 1,
      courseData: [],
      detailData: [],
      detailOpen: false,
      selectOpen: false,
      userInfo: {}
    }

    config = {
      navigationBarTitleText: '课程表',
      enablePullDownRefresh: true
    }

    mixins = [courseMixin]

    computed = {
      currentWeekList () {
        const dateOfToday = Date.now()
        const dayOfToday = (new Date().getDay() + 7 - 1) % 7
        const daysOfThisWeek = Array.from(new Array(7))
        .map((_, i) => {
          const date = new Date(dateOfToday + (i - dayOfToday) * 1000 * 60 * 60 * 24)
          return date.getDate()
        })
        return daysOfThisWeek
      },

      timeList () {
        const classNum = parseInt(this.termId / 2)
        if (classNum === 1 || classNum === 2) {
          return [['08:10', '09:00'], ['10:05', '10:55'], ['13:30', '14:20'], ['15:25', '16:15'], ['18:00', '18:50']]
        } else {
          return [['08:10', '09:00'], ['10:20', '11:10'], ['13:30', '14:20'], ['15:25', '16:15'], ['18:00', '18:50']]
        }
      }
    }

    methods = {
      changeWeek (event) {
        this.slectedWeek = event.detail.value
        this.thisWeek = parseInt(this.weeks[event.detail.value])
        this.selectOpen = false
      },

      async syncCourse () {
        wepy.showLoading({
          title: '课表抓取中'
        })
        this.selectOpen = !this.selectOpen

        const [createNewTermError] = await this.to(this.createNewTerm(this.term))
        if (createNewTermError) return

        this.getCourseHandel(undefined, undefined, true)
      },

      detailHandler (event) {
        const dayIndex = event.currentTarget.dataset.dayindex
        const timeIndex = event.currentTarget.dataset.timeindex
        const detailData = this.courseData[timeIndex]
        if (!detailData) return

        if (detailData.length > 0) {
          let result = []
          detailData.forEach((item) => {
            if (item.day === dayIndex) {
              result.push(item)
            }
          })
          if (result.length > 0) {
            this.detailOpen = true
            this.detailData = result
          }
        }
      },

      selectListSwitch () {
        this.selectOpen = !this.selectOpen
      },

      closeDetail () {
        this.detailOpen = false
      }
    }

    watch = {
      async tempTerm (newVal, oldVal) {
        this.getCourseHandel(newVal, true, true)
      }
    }

    async getWeek () {
      const [err, res] = await this.to(request({
        url: '/api/hrbust/week'
      }))
      if (err) {
        return Promise.reject('获取周数错误')
      }

      const getWeekData = res.data.data

      let slectedWeek = 0
      const weeks = Array.from(new Array(30), (val, index) => index + 1)
      const tWeeks = weeks.map((item, index) => {
        if (getWeekData.week === item) {
          slectedWeek = index
          return `${item}`
        }
        return item
      })
      this.thisWeek = getWeekData.week
      this.thisWeekNum = getWeekData.week
      this.term = getWeekData.term
      this.weeks = tWeeks
      this.methods.setCurrentTerm(getWeekData.term)
      this.slectedWeek = slectedWeek
      this.$apply()

      return Promise.resolve()
    }

    async getCourse (term, flag, updatedStorage) {
      wepy.showLoading({
        title: '正在加载课表'
      })

      if (term === undefined) {
        term = this.term
      }

      const [err, res] = await this.to(request({
        url: '/api/hrbust/course',
        data: { term }
      }))
      if (err) {
        wepy.showToast({
          title: '拉取数据失败',
          image: '../assets/icon/error_icon.png',
          duration: 1000
        })
        return Promise.reject('获取课表失败')
      }

      const getCourseData = res.data.data.course
      this.termId = res.data.data.courseTermId

      if (!getCourseData) return Promise.reject('课表为空')

      let courseList = []
      let courseIdList = {}
      let courseCardStyleMap = ['pink', 'cyan', 'purple', 'green', 'blue', 'yellow', 'orange', 'deepgreen', 'deepgreen-1', 'deepgreen-2', 'deepgreen-3']
      let courseCardStyleIndex = 0

      for (let i = 0; i < 10; i++) {
        courseList[i] = []
      }

      getCourseData.forEach((courseItem, index) => {
        if (!courseIdList[courseItem.courseId]) {
          let cardClassName = courseCardStyleMap[courseCardStyleIndex % 11]
          courseIdList[courseItem.courseId] = cardClassName
          courseItem.class = cardClassName
          courseCardStyleIndex++
        } else {
          courseItem.class = courseIdList[courseItem.courseId]
        }
        courseList[courseItem.sectionstart].push(courseItem)
      })

      this.courseData = courseList
      this.$apply()

      if (flag) {
        this.methods.setCurrentTerm(this.tempTerm)
      }

      if (updatedStorage) {
        this.userInfo.course = courseList
        wepy.setStorage({
          key: this.username,
          data: this.userInfo
        })
      }

      wepy.hideLoading()
      wepy.showToast({
        title: '拉取数据成功',
        icon: 'success',
        duration: 1000
      })
      return Promise.resolve()
    }

    async getCourseHandel (term, flag, updatedStorage) {
      const [getCourseError] = await this.to(this.getCourse(term, flag, updatedStorage))
      if (getCourseError) {
        if (getCourseError === '课表为空') {
          const userInfo = wepy.getStorageSync(this.username) || {}

          if (!userInfo.notFirst) {
            const [createNewTermError] = await this.to(this.createNewTerm(this.term))
            if (createNewTermError) return

            this.userInfo.notFirst = true
            wepy.setStorage({
              key: this.username,
              data: this.userInfo
            })

            this.getCourseHandel(undefined, undefined, true)
          } else {
            wepy.showToast({
              title: '课表为空',
              image: '../assets/icon/icon_info.png',
              duration: 1000
            })
          }
        }
      }
    }

    async onLoad () {
      if (!this.username) {
        wepy.reLaunch({
          url: '/pages/index'
        })
        return
      }

      const [getWeekError] = await this.to(this.getWeek())
      if (getWeekError) {
        return wepy.showModal({
          content: '服务器获取当前周数错误，请稍候重试',
          showCancel: false
        })
      }

      const userInfo = wepy.getStorageSync(this.username)
      if (userInfo) this.userInfo = userInfo
      const course = this.userInfo.course

      if (course) {
        this.courseData = course
        this.$apply()
      } else {
        this.getCourseHandel(undefined, undefined, true)
      }
    }

    async onPullDownRefresh() {
      const [getWeekError] = await this.to(this.getWeek())
      if (getWeekError) {
        wepy.stopPullDownRefresh()
        return wepy.showModal({
          content: '服务器获取当前周数错误，请稍候重试',
          showCancel: false
        })
      }

      this.getCourseHandel(undefined, undefined, true)
      wepy.stopPullDownRefresh()
    }

    onHide () {
      this.selectOpen = false
      this.detailOpen = false
    }
  }
</script>

<style lang="less">
.this-week.pink {
  background-color: #f39dd7!important;
}
.this-week.cyan {
  background-color: #75e9eb!important;
}
.this-week.purple {
  background-color: #aa8fff!important;
}
.this-week.green {
  background-color: #65f0a3!important;
}
.this-week.blue {
  background-color: #57b6fc!important;
}
.this-week.yellow {
  background-color: #f4c44f!important;
}
.this-week.orange {
  background-color: #ff9292!important;
}
.this-week.deepgreen {
  background-color: #70ec54!important;
}
.this-week.deepgreen-1 {
  background-color: #898800!important;
}
.this-week.deepgreen-2 {
  background-color: #A569BD!important;
}
.this-week.deepgreen-3 {
  background-color: #EC7063!important;
}

.wrap {
  width: 100%;
  font-size: 10px;
  color: #3f627e;

  .refresh {
    font-size: 8px;
    width: 100%;
    text-align: center;
    color: #999;
    opacity: .8;
  }

  .picker-wrapper {
    display: flex;
    height: 38px;
    margin: 8rpx 0;
    text-align: center;
    .wrapper-left {
      width: 100rpx;
    }
    picker {
      flex: 1;
    }
    .wrapper-right {
      width: 100rpx;
      line-height: 25px;
      font-size: 70rpx;
      transform:rotate(0deg);
      transition: transform linear 0.1s;
    }
    .rotate {
      transform:rotate(45deg)!important;
    }
    .num {
      font-size: 14px;
      font-weight: 900;
    }
  }

  .course-header {
    display: flex;
    width: 100%;
    border-bottom: 2px solid #ecf3f3;
    .item {
      background-color: #f4f8f8;
    }
    .now-day {
      font-size: 12px;
      font-weight: 700;
      background-color: #b7f6f3;
    }
  }

  .course-body {
    width: 100%;
    .line-item {
      display: flex;
      width: 100%;
      .item {
        height: 180rpx;
        position: relative;
        .item-content {
          display: flex;
          flex-direction: column;
          flex: 1;
          justify-content: center;
          align-items: center;
          border-radius: 10px;
        }
      }
      .item:first-child {
        background-color: #f4f8f8;
      }
    }
  }
}

.item {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  padding: 2px 4px;
  flex: 1;
  width: 1%;
  overflow:hidden;
}

.no-this-week {
  position: absolute;
  top:0px;
  bottom: 0px;
  height: 88%;
  width: 75%;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 4px;
  font-size: 8px;
  color: #999;
  background-color: #eaeff4;
  border-radius: 10px;
}
.this-week {
  position: absolute;
  top:0px;
  bottom: 0px;
  height: 88%;
  width: 75%;
  z-index: 100;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 4px;
  font-size: 8px;
  color: #fff;
  border-radius: 10px;
}

.time-item {
  width: 100%;
  display: flex;
  flex: 1;
  flex-direction: column;
  justify-content: center;
  align-items:center;
}
.time-item .num {
  font-size: 12px;
}

.select-list {
  position: fixed;
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
  top: 0px;
  z-index: 100;
  .select-wrapper {
    padding: 20rpx;
    background-color: #FFFFFF;
    z-index: 200;
      .select-item {
        position: relative;
        display: flex;
        align-items: center;
        padding: 20rpx 30rpx;
        margin-bottom: 20rpx;
        font-size: 14px;
        color: #888;
      }
      .select-text {
        flex: 1;
      }
      .select-data {
        margin-right: 28rpx;
      }
      .select-arrow {
        padding-right: 26rpx;
        position: relative;
      }
      .select-arrow:after {
        content: " ";
        display: inline-block;
        height: 16rpx;
        width: 16rpx;
        border-width: 4rpx 4rpx 0 0;
        border-color: #888;
        border-style: solid;
        transform: matrix(0.71, 0.71, -0.71, 0.71, 0, 0);
        position: absolute;
        top: 50%;
        margin-top: -10rpx;
        right: 28rpx;
      }
      button {
        width: 70%;
      }
  }
  .empty-top {
    height: 58px;
  }
  .empty-bottom {
    flex: 1;
    background-color: rgba(0, 0, 0, .2);
  }
}

.detial {
  position: fixed;
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
  top: 0;
  padding-top: 20px;
  z-index: 100;
  background-color: #f4f7f9;
  view {
    margin-bottom: 5px;
  }
  .course-name {
    font-size: 15px;
  }
  .detial-current-week, .detail-not-current-week {
    display: flex;
    flex-direction: column;
    margin-bottom: 20px;
    padding: 20px;
    font-size: 12px;
    background-color: #fff;
  }
  .detial-current-week {
    order: 1;
    color: #3f627e;
    font-weight: 700;
  }
  .detail-not-current-week {
    order: 5;
    color: #ccc;
  }
}
</style>
