<template>
  <block>
    <block>
      <loading wx:if="{{loading}}"/>
      <view class="wrap">
        <view class="refresh">更新课表请下拉刷新</view>
        <view wx:if="{{!doNotRefresh}}" class="picker-wrapper">
          <view class="wrapper-left">
          </view>
          <picker mode="selector" bindchange="changeWeek" value="{{slectedWeek}}" range="{{weeks}}">
            <view>
              <view>
                第<text class="num"> {{weeks.length > 0 ? weeks[slectedWeek] : 0}} </text>周
                <block wx-if="{{weeks[slectedWeek] == thisWeekNum}}">
                  (当前)
                </block>
              </view>
              <view>{{terms[currentTerm]}}</view>
            </view>
          </picker>
          <view class="wrapper-right {{selectOpen ? 'rotate' : ''}}" bindtap="selectListSwitch">+</view>
        </view>
        <view class="course-header">
          <view class="item">
            {{currentWeekList.month}}月
          </view>
          <block wx:key="day" wx:for="{{dayNum}}" wx:for-item="dayItem" wx:for-index="dayIndex">
            <view class="item {{dayIndex + 1 === nowDayIndex ? 'now-day' : ''}}">
              <view>{{dayItem}}</view>
              <view>{{currentWeekList.days[dayIndex]}}日</view>
            </view>
          </block>
        </view>
        <view class="course-body">
        <view class="line-item" wx:key="time" wx:for="{{time}}" wx:for-index="timeIndex" wx:for-item="timeItem">
          <block wx:key="course-content" wx:for="{{[0,1,2,3,4,5,6,7]}}" wx:for-index="dayIndex">
              <block wx:if="{{dayIndex === 0}}">
                <!-- 左侧时间列表 -->
                <view class="item {{currentPart === timeIndex ? 'now-time' : ''}}">
                  <view class="time-item">
                    <view>{{timeList[timeIndex][0]}}</view>
                    <view class="num">{{timeItem[0]}}</view>
                  </view>
                  <view class="time-item">
                    <view>{{timeList[timeIndex][1]}}</view>
                    <view class="num">{{timeItem[1]}}</view>
                  </view>
                </view>
              </block>
              <block wx:else>
                <!-- 课表内容 -->
                <view class="item" bindtap="detailHandler" data-dayIndex="{{dayIndex}}" data-timeIndex="{{timeItem[0]}}">
                  <view class="item-content">
                    <block wx:key="course" wx:for="{{courseData[timeItem[0]]}}">
                      <block wx:if="{{item.day == dayIndex}}">
                        <view class="this-week {{item.class}} {{item.day === nowDayIndex && (currentPart + 1) * 2 === item.sectionend ? 'use-border' : ''}}" wx:if="{{item.period[thisWeek] == 1}}">
                          <text>《{{item.name}}》@{{item.locale}}</text>
                        </view>
                        <view class="no-this-week" wx:else>
                          <text>《{{item.name}}》@{{item.locale}}</text>
                        </view>
                      </block>
                    </block>
                  </view>
                </view>
              </block>
            </block>
        </view>
        </view>
      </view>
    </block>

    <view class="unplan-course" wx:if="{{unplanCourse.length > 0}}">
      <view class="title">没有具体上课时间或地点的课程</view>
      <view class="content">
        <view class="content-header">
          <view wx:for="{{unplanCourseTitle}}" wx:for-item="item">{{item}}</view>
        </view>
        <view class="unplan-item" wx:for="{{unplanCourse}}" wx:for-item="unplanCourseObj">
          <view wx:for="{{unplanCourseObj}}" wx:for-item="unplanCourseItem">
            <text>{{unplanCourseItem}}</text>
          </view>
        </view>
      </view>
    </view>

    <!-- SelectList -->
    <view class="select-list" wx:if="{{selectOpen}}">
      <view class="empty-top" bindtap="selectListSwitch">
      </view>
      <view class="select-wrapper">
        <navigator url="./choiceTrem" class="select-item">
          <view class="select-text">选择学期</view>
          <view class="select-data">{{terms[currentTerm]}}</view>
          <view class="select-arrow"></view>
        </navigator>
        <picker mode="selector" bindchange="changeWeek" value="{{slectedWeek}}" range="{{weeks}}">
            <view class="select-item">
                <view class="select-text">选择周数</view>
                <view class="select-data">
                  第<text class="num"> {{weeks.length > 0 ? weeks[slectedWeek] : 0}} </text>周
                  <block wx-if="{{weeks[slectedWeek] == thisWeekNum}}">
                    (当前)
                  </block>
                </view>
                <view class="select-arrow"></view>
            </view>
        </picker>
        <button type="primary" bindtap="syncCourse">同步教务在线课表</button>
      </view>
      <view class="empty-bottom" bindtap="selectListSwitch">
      </view>
    </view>
    <inputdialog wx:if="{{popDialog}}" :captchaimageprops.sync="captchaImage" :errormsg.sync="errormsg" pagetag="course"/>
    <ad class="advertising" unit-id="adunit-f1ef7db925a525a8"></ad>
  </block>
</template>

<script>
  import wepy from 'wepy'
  import { connect } from 'wepy-redux'
  import Loading from '../components/loading'
  import { request } from 'utils'
  import courseMixin from '../mixins/course'
  import { setCurrentTerm, setLoading } from '../store/actions'
  import InputDialog from '../components/inputDialog'

  // 在页面中定义插屏广告
  let interstitialAd = null

  @connect({
    loading (state) {
      return state.user.loading
    },
    currentTerm (state) {
      return state.currentTerm.currentTerm
    },
    tempTerm (state) {
      return state.currentTerm.tempTerm
    },
    username (state) {
      return state.user.studentInfo.username
    }
  }, {
    setCurrentTerm,
    setLoading
  })
  export default class Course extends wepy.page {
    data = {
      terms: ['大一 第1学期', '大一 第2学期', '大二 第1学期', '大二 第2学期', '大三 第1学期', '大三 第2学期', '大四 第1学期', '大四 第2学期'],
      weeks: Array.from(new Array(25), (val, index) => index + 1),
      slectedWeek: 0,
      thisWeek: 1,
      thisWeekNum: 1,
      nowDayIndex: new Date().getDay(),
      termId: 0,
      dayNum: ['周一', '周二', '周三', '周四', '周五', '周六', '周日'],
      time: [['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10']],
      month: new Date().getMonth() + 1,
      unplanCourseTitle: ['课程名称', '任课教师', '合班', '上课周次', '上课时间', '上课地点'],
      courseData: [],
      detailData: [],
      unplanCourse: [],
      detailOpen: false,
      selectOpen: false,
      userInfo: {},
      courseCardStyleMap: Array.from(new Array(14)).map((_, index) => {
        return 'class' + (index + 1)
      }),
      captchaImage: '',
      errormsg: '',
      popDialog: false
    }
    components = {
      loading: Loading,
      inputdialog: InputDialog
    }
    config = {
      navigationBarTitleText: '课程表',
      enablePullDownRefresh: true
    }

    mixins = [courseMixin]

    computed = {
      currentWeekList () {
        let week
        if (this.thisWeekNum === 25) {
          if (this.slectedWeek === 24) {
            week = 0
          } else {
            week = +this.slectedWeek + 1
          }
        } else {
          week = this.slectedWeek - this.thisWeekNum + 1
        }
        const aDayTimeStamp = 24 * 60 * 60 * 1000
        const aWeekTimeStamp = 7 * aDayTimeStamp
        const timeStamp = Date.now() + week * aWeekTimeStamp
        const currentDay = new Date(timeStamp).getDay()
        const month = new Date(timeStamp + aDayTimeStamp * (currentDay + 6) % 7).getMonth() + 1

        const days = Array.from(new Array(7)).map((_, i) => {
          return new Date(timeStamp + aDayTimeStamp * (i - (currentDay + 6) % 7)).getDate()
        })

        return {
          days,
          month
        }
      },

      timeList () {
        const classNum = parseInt(this.termId / 2)
        if (classNum === 1 || classNum === 2) {
          return [['08:10', '09:00'], ['10:05', '10:55'], ['13:30', '14:20'], ['15:25', '16:15'], ['18:00', '18:50']]
        } else {
          return [['08:10', '09:00'], ['10:20', '11:10'], ['13:30', '14:20'], ['15:25', '16:15'], ['18:00', '18:50']]
        }
      },

      currentPart () {
        const date = new Date()
        const hour = date.getHours()
        const minute = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes()
        const dateNum = parseInt('' + hour + minute)

        if (dateNum >= 600 && dateNum <= 950) {
          return 0
        } else if (dateNum > 950 && dateNum <= 1230) {
          return 1
        } else if (dateNum > 1230 && dateNum <= 1520) {
          return 2
        } else if (dateNum > 1520 && dateNum <= 1730) {
          return 3
        } else if (dateNum > 1730 && dateNum <= 1850) {
          return 4
        } else {
          return false
        }
      }
    }

    methods = {
      changeWeek (event) {
        this.slectedWeek = parseInt(event.detail.value)
        this.thisWeek = parseInt(this.weeks[event.detail.value])
        this.selectOpen = false
      },

      async syncCourse (e) {
        this.methods.setLoading(true)
        this.selectOpen = false

        const [createNewTermError] = await this.to(this.createNewTerm(this.currentTerm, e.captcha))
        if (createNewTermError) return

        this.getCourseHandel(this.currentTerm)
      },

      detailHandler (event) {
        const dayIndex = event.currentTarget.dataset.dayindex
        const timeIndex = event.currentTarget.dataset.timeindex
        wepy.navigateTo({url: `courseDetail?dayIndex=${dayIndex}&timeIndex=${timeIndex}&thisWeek=${this.thisWeek}`})
      },

      selectListSwitch () {
        this.selectOpen = !this.selectOpen
      },

      closeDetail () {
        this.detailOpen = false
      }
    }

    watch = {
      async tempTerm (newTerm) {
        this.methods.setCurrentTerm(newTerm)

        this.getCourseHandel(newTerm)
      }
    }

    async getWeekAndTerm () {
      const [err, res] = await this.to(request({ url: '/api/hrbust/week' }))
      if (err) return Promise.reject('获取周数错误')

      const { week: onlineWeek, term: onlineTerm } = res.data.data

      // 设置当前周数，如果教务在线获取的周数超过25周，当前周数设置为25
      const MAX_WEEK_NUM = 25
      const isExceed = onlineWeek > MAX_WEEK_NUM
      this.thisWeek = this.thisWeekNum = isExceed ? MAX_WEEK_NUM : onlineWeek
      this.slectedWeek = isExceed ? (MAX_WEEK_NUM - 1) : (onlineWeek - 1)

      // 学期数优先取storage中的
      const term = this.userInfo.term || onlineTerm
      this.term = term
      this.methods.setCurrentTerm(term) // 设置当前周

      // 更新视图
      this.$apply()

      return Promise.resolve()
    }

    async getCourse (term) {
      this.methods.setLoading(true)

      const [err, res] = await this.to(request({
        url: '/api/hrbust/course',
        data: { term }
      }))
      if (err) {
        wepy.showToast({title: '获取课表失败', image: '../assets/icon/error_icon.png', duration: 1000})
        this.methods.setLoading(false)
        return Promise.reject('获取课表失败')
      }

      const getCourseData = res.data.data.course
      this.termId = res.data.data.courseTermId
      this.unplanCourse = res.data.data.unplanCourse

      // 课表为空的话，提示
      if (!getCourseData) {
        this.methods.setLoading(false)
        wepy.showModal({
          content: '该学期未查询到课表，请创建该学期',
          showCancel: false,
          success: () => {
            wepy.navigateTo({url: 'choiceTrem'})
          }
        })

        return
      }

      // 处理返回数据
      let courseList = []
      let courseIdList = {}
      let courseCardStyleIndex = 0

      for (let i = 0; i < 10; i++) {
        courseList[i] = []
      }

      getCourseData.forEach((courseItem, index) => {
        if (!courseIdList[courseItem.courseId]) {
          let cardClassName = this.courseCardStyleMap[courseCardStyleIndex % this.courseCardStyleMap.length]
          courseIdList[courseItem.courseId] = cardClassName
          courseItem.class = cardClassName
          courseCardStyleIndex++
        } else {
          courseItem.class = courseIdList[courseItem.courseId]
        }
        courseList[courseItem.sectionstart].push(courseItem)
      })

      this.courseData = courseList
      this.$apply()

      // 学期数、课程、未安排课程存入Storage
      this.userInfo.term = term
      this.userInfo.course = courseList
      this.userInfo.unplanCourse = this.unplanCourse
      wepy.setStorage({ key: this.username, data: this.userInfo })

      this.methods.setLoading(false)
      wepy.showToast({ title: '获取课表成功', icon: 'success', duration: 1000 })
      return Promise.resolve()
    }

    async getCourseHandel (term) {
      const [getCourseError] = await this.to(this.getCourse(term))
      if (getCourseError) {
        this.methods.setLoading(false)

        if (getCourseError === '课表为空') {
          wepy.showToast({
            title: '课表为空',
            image: '../assets/icon/icon_info.png',
            duration: 1000
          })
        }
      }
    }

    onShow() {
      // 在适合的场景显示插屏广告
      if (interstitialAd) {
        interstitialAd.show().catch((err) => {
          console.log(err)
        })
      }
    }

    async onLoad () {
      // 在页面onLoad回调事件中创建插屏广告实例
      if (wx.createInterstitialAd) {
        interstitialAd = wx.createInterstitialAd({
          adUnitId: 'adunit-167f2a17e8f9ecc4'
        })
        interstitialAd.onLoad(() => {})
        interstitialAd.onError(() => {})
        interstitialAd.onClose(() => {})
      }

      wepy.showShareMenu({
        withShareTicket: true
      })

      // 未登陆跳转
      if (!this.username) {
        return wepy.reLaunch({url: '/pages/index'})
      }

      // 获取storage数据
      const userInfo = wepy.getStorageSync(this.username)
      if (userInfo) this.userInfo = userInfo

      // 获取当前周数、以及学期数
      const [getWeekAndTermError] = await this.to(this.getWeekAndTerm())
      if (getWeekAndTermError) {
        this.methods.setLoading(false)
        return wepy.showModal({content: '服务器获取当前周数错误，请稍候重试', showCancel: false})
      }

      const course = this.userInfo.course
      const unplanCourse = this.userInfo.unplanCourse
      if (course) {
        // storage存在课程数据，直接渲染，应用$apply方法使视图更新
        this.courseData = course
        this.unplanCourse = unplanCourse
        this.$apply()
      } else {
        // storage不存在课程数据，发送请求，重新获取，并存入storage
        this.getCourseHandel(this.currentTerm)
      }
    }

    async onPullDownRefresh() {
      this.methods.syncCourse.bind(this)({ captcha: null })
      wepy.stopPullDownRefresh()
    }

    onHide () {
      this.selectOpen = false
      this.detailOpen = false
    }

    events = {
      'submit-emit': (captcha, pagetag) => {
        if (pagetag !== 'course') {
          return
        }
        this.methods.syncCourse.bind(this)({ captcha })
      },
      'closedialog-emit': () => {
        this.popDialog = false
      }
    }
  }
</script>

<style lang="less">
.wrap {
  width: 100%;
  font-size: 10px;
  color: #3f627e;

  .refresh {
    font-size: 8px;
    width: 100%;
    text-align: center;
    color: #999;
    opacity: .8;
  }

  .picker-wrapper {
    display: flex;
    height: 38px;
    margin: 8rpx 0;
    text-align: center;
    .wrapper-left {
      width: 100rpx;
    }
    picker {
      flex: 1;
    }
    .wrapper-right {
      width: 100rpx;
      line-height: 25px;
      font-size: 70rpx;
      transform:rotate(0deg);
      transition: transform linear 0.1s;
    }
    .rotate {
      transform:rotate(45deg)!important;
    }
    .num {
      font-size: 14px;
      font-weight: 900;
    }
  }

  .course-header {
    display: flex;
    width: 100%;
    border-bottom: 2px solid #ecf3f3;
    .item {
      background-color: #f4f8f8;
    }
    .now-day {
      font-size: 12px;
      font-weight: 700;
      background-color: #b7f6f3;
    }
  }

  .course-body {
    width: 100%;
    .line-item {
      display: flex;
      width: 100%;
      .item {
        height: 180rpx;
        position: relative;
        .item-content {
          display: flex;
          // 好像是这里7P容易出问题
          // flex-direction: column;
          flex: 1;
          justify-content: center;
          align-items: center;
          border-radius: 20rpx;
        }
      }
      .item:first-child {
        background-color: #f4f8f8;
      }
    }
    .now-time {
      font-size: 12px;
      font-weight: 700;
      background-color: #b7f6f3!important;
    }
  }
}

.unplan-course {
  display: flex;
  width: 100%;
  font-size: 10px;
  color: #3f627e;
  .title {
    width: 12.5%;
    display: flex;
    box-sizing: border-box;
    align-items: center;
    text-align: center;
    padding: 24rpx;
    background-color: #f4f8f8;
  }
  .content {
    width: 87.5%;
    .content-header {
      display: flex;
      margin-bottom: 8rpx;
      background-color: #f4f8f8;
      view {
        height: 70rpx;
        line-height: 70rpx;
        text-align: center;
        flex: 1;
      }
    }
    .unplan-item {
      display: flex;
      margin-left: 4rpx;
      margin-right: 4rpx;
      margin-bottom: 8rpx;
      border-radius: 10px;
      padding: 10rpx;
      view {
        display: flex;
        height: 105rpx;
        flex: 1;
        justify-content: center;
        align-items: center;
        text-align: center;
        text-overflow: ellipsis;
        overflow: hidden;
        color: #fff;
        text {
          display: -webkit-box;
          vertical-align:middle;
          -webkit-box-pack: center;
          text-overflow: ellipsis;
          -webkit-line-clamp: 2;
          -webkit-box-orient: vertical;
          overflow: hidden;
        }
      }
      &:nth-child(4n) {
        background-color: #4fb5a9;
      }
      &:nth-child(4n+1) {
        background-color: #fade8b;
      }
      &:nth-child(4n+2) {
        background-color: #e4516e;
      }
      &:nth-child(4n+3) {
        background-color: #8fccf0;
      }
    }
  }
}

.item {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  padding: 2px 2px;
  flex: 1;
  width: 1%;
  overflow:hidden;
  text {
    display: -webkit-box;
    vertical-align:middle;
    -webkit-box-pack: center;
    text-overflow: ellipsis;
    -webkit-line-clamp: 5;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

.this-week, .no-this-week {
  position: absolute;
  top:0px;
  bottom: 0px;
  height: 98%;
  width: 95%;
  display: flex;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  padding: 4px;
  font-size: 8px;
  border-radius: 10px;
}
.no-this-week {
  color: #999;
  background-color: #eaeff4;
}
.this-week {
  z-index: 100;
  color: #fff;
  border-width: 6rpx;
  border-style: none;
}
.this-week.use-border {
  border-style: solid!important;
}

.time-item {
  width: 100%;
  display: flex;
  flex: 1;
  flex-direction: column;
  justify-content: center;
  align-items:center;
}
.time-item .num {
  font-size: 12px;
}

.select-list {
  position: fixed;
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
  top: 0px;
  z-index: 100;
  .select-wrapper {
    padding: 20rpx;
    background-color: #FFFFFF;
    z-index: 200;
      .select-item {
        position: relative;
        display: flex;
        align-items: center;
        padding: 20rpx 30rpx;
        margin-bottom: 20rpx;
        font-size: 14px;
        color: #888;
      }
      .select-text {
        flex: 1;
      }
      .select-data {
        margin-right: 28rpx;
      }
      .select-arrow {
        padding-right: 26rpx;
        position: relative;
      }
      .select-arrow:after {
        content: " ";
        display: inline-block;
        height: 16rpx;
        width: 16rpx;
        border-width: 4rpx 4rpx 0 0;
        border-color: #888;
        border-style: solid;
        transform: matrix(0.71, 0.71, -0.71, 0.71, 0, 0);
        position: absolute;
        top: 50%;
        margin-top: -10rpx;
        right: 28rpx;
      }
      button {
        width: 70%;
      }
  }
  .empty-top {
    height: 52px;
  }
  .empty-bottom {
    flex: 1;
    background-color: rgba(0, 0, 0, .2);
  }
}


// 不同颜的课程，不同颜色
.this-week.class1 {
  background-color: #f3a481!important;
  border-color: #da7548;
}
.this-week.class2 {
  background-color: #ee74b2!important;
  border-color: #d03483;
}
.this-week.class3 {
  background-color: #cd77d1!important;
  border-color: #ae29b4;
}
.this-week.class4 {
  background-color: #52afa9!important;
  border-color: #0c7c75;
}
.this-week.class5 {
  background-color: #6d95e6!important;
  border-color: #2495c4;
}
.this-week.class6 {
  background-color: #5381b0!important;
  border-color: #205c99;
}
.this-week.class7 {
  background-color: #f9d749!important;
  border-color: #d7ad00;
}
.this-week.class8 {
  background-color: #ec8677!important;
  border-color: #dd4e39;
}
.this-week.class9 {
  background-color: #4290f7!important;
  border-color: #0162e2;
}
.this-week.class10 {
  background-color: #f3a83b!important;
  border-color: #de8300;
}
.this-week.class11 {
  background-color: #ce7692!important;
  border-color: #cc406d;
}
.this-week.class12 {
  background-color: #66a45d!important;
  border-color: #207b13;
}
.this-week.class13 {
  background-color: #a9a9a9!important;
  border-color: #8a8a8a;
}
.this-week.class14 {
  background-color: #a7ddfb!important;
  border-color: #6db8e2;
}
.advertising {
  margin-top: 10rpx;
  position: relative;
  transform-origin: center bottom;
  transform: scale(0.8) !important;
}
page {
  padding-bottom: 35rpx;
}
</style>
