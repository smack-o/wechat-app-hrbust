/**
 * Test swagger
 * Testing the Fastify swagger API
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import ajax, { AjaxPromise, ExtraFetchParams } from '@ajax'
import * as models from '../model/models'

/* tslint:disable:no-unused-variable member-ordering object-literal-shorthand */

/**
  * @description apiCommentBrickIdGet参数
  * @property `id` 请求参数 id
  * @property `[pageNum]` 分页页码
  * @property `[pageSize]` 每页数量
  */
export interface ParamsapiCommentBrickIdGet {
  // pathParams
  /**
   * 请求参数 id
   */
  id: string;
  // queryParams
  /**
   * 分页页码
   */
  pageNum?: string;
  /**
   * 每页数量
   */
  pageSize?: string;
}
/**
  * @description apiCommentCommentIdGet参数
  * @property `id` 请求参数 id
  * @property `[pageNum]` 分页页码
  * @property `[pageSize]` 每页数量
  */
export interface ParamsapiCommentCommentIdGet {
  // pathParams
  /**
   * 请求参数 id
   */
  id: string;
  // queryParams
  /**
   * 分页页码
   */
  pageNum?: string;
  /**
   * 每页数量
   */
  pageSize?: string;
}
/**
  * @description apiCommentMateIdGet参数
  * @property `id` 请求参数 id
  * @property `[pageNum]` 分页页码
  * @property `[pageSize]` 每页数量
  */
export interface ParamsapiCommentMateIdGet {
  // pathParams
  /**
   * 请求参数 id
   */
  id: string;
  // queryParams
  /**
   * 分页页码
   */
  pageNum?: string;
  /**
   * 每页数量
   */
  pageSize?: string;
}
/**
  * request body
  */
export type ParamsBodyapiCommentPost = models.Data

export class CommentApi {
  protected $basePath = ''.replace(/\/$/, '')

  public constructor(basePath?: string) {
    if (basePath !== undefined) {
      this.$basePath = basePath.replace(/\/$/, '')
    }
  }

  /**
   * 获取表白墙评论列表
   * @summary 获取表白墙评论列表
   * @param params ParamsapiCommentBrickIdGet
   
   * @param opt ajax config
   * @returns models.InlineResponse2001
   */
  public apiCommentBrickIdGet = (
    params: ParamsapiCommentBrickIdGet,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.InlineResponse2001>  => {
    const {
    id,
} = params
    const url = this.$basePath + `/api/comment/brick/${id}`
    const p: any = {}
    p.query = {}
    if ('pageNum' in params) p.query.pageNum = params.pageNum
    if ('pageSize' in params) p.query.pageSize = params.pageSize
    ajax.check(params.id, 'id')
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    })
  }
  /**
   * 获取回复评论列表
   * @summary 获取回复评论列表
   * @param params ParamsapiCommentCommentIdGet
   
   * @param opt ajax config
   * @returns models.InlineResponse2001
   */
  public apiCommentCommentIdGet = (
    params: ParamsapiCommentCommentIdGet,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.InlineResponse2001>  => {
    const {
    id,
} = params
    const url = this.$basePath + `/api/comment/comment/${id}`
    const p: any = {}
    p.query = {}
    if ('pageNum' in params) p.query.pageNum = params.pageNum
    if ('pageSize' in params) p.query.pageSize = params.pageSize
    ajax.check(params.id, 'id')
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    })
  }
  /**
   * 获取卖舍友评论列表
   * @summary 获取卖舍友评论列表
   * @param params ParamsapiCommentMateIdGet
   
   * @param opt ajax config
   * @returns models.InlineResponse2001
   */
  public apiCommentMateIdGet = (
    params: ParamsapiCommentMateIdGet,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.InlineResponse2001>  => {
    const {
    id,
} = params
    const url = this.$basePath + `/api/comment/mate/${id}`
    const p: any = {}
    p.query = {}
    if ('pageNum' in params) p.query.pageNum = params.pageNum
    if ('pageSize' in params) p.query.pageSize = params.pageSize
    ajax.check(params.id, 'id')
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    })
  }
  /**
   * 新建评论
   * @summary 新建评论
   
   * @param data: ParamsBodyapiCommentPost// request body
   * @param opt ajax config
   * @returns models.InlineResponse200
   */
  public apiCommentPost = (
    
    data: ParamsBodyapiCommentPost,opt?: ExtraFetchParams
  ) : AjaxPromise<models.InlineResponse200>  => {
    const url = this.$basePath + '/api/comment'
    const p: any = {}
    p.data = data
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    })
  }
}

export default new CommentApi()