/**
 * Test swagger
 * Testing the Fastify swagger API
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import ajax, { AjaxPromise, ExtraFetchParams } from '@ajax'
import * as models from '../model/models'

/* tslint:disable:no-unused-variable member-ordering object-literal-shorthand */

/**
  * request body
  */
export type ParamsBodyapiMediaComparefacePost = models.Data3
/**
  * @description apiMediaPost参数
  * @property `file` file content
  */
export interface ParamsapiMediaPost {
  // formParams
  /**
   * file content
   */
  file: any;
}
/**
  * request body
  */
export type ParamsBodyapiMediaPost = models.Data1
/**
  * request body
  */
export type ParamsBodyapiMediaUrlPost = models.Data2

export class MediaApi {
  protected $basePath = ''.replace(/\/$/, '')

  public constructor(basePath?: string) {
    if (basePath !== undefined) {
      this.$basePath = basePath.replace(/\/$/, '')
    }
  }

  /**
   * 微信审核回调
   * @summary 微信审核回调
   
   
   * @param opt ajax config
   * @returns models.InlineResponse200
   */
  public apiLegalcheckPost = (
    
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.InlineResponse200>  => {
    const url = this.$basePath + '/api/legalcheck'
    const p: any = {}
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    })
  }
  /**
   * 图片对比，情侣脸识别
   * @summary 图片对比，情侣脸识别
   
   * @param data: ParamsBodyapiMediaComparefacePost// request body
   * @param opt ajax config
   * @returns models.InlineResponse2003
   */
  public apiMediaComparefacePost = (
    
    data: ParamsBodyapiMediaComparefacePost,opt?: ExtraFetchParams
  ) : AjaxPromise<models.InlineResponse2003>  => {
    const url = this.$basePath + '/api/media/compareface'
    const p: any = {}
    p.data = data
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    })
  }
  /**
   * 上传文件
   * @summary 上传文件
   * @param params ParamsapiMediaPost
   * @param data: ParamsBodyapiMediaPost// request body
   * @param opt ajax config
   * @returns models.InlineResponse2002
   */
  public apiMediaPost = (
    params: ParamsapiMediaPost,
    data: ParamsBodyapiMediaPost,opt?: ExtraFetchParams
  ) : AjaxPromise<models.InlineResponse2002>  => {
    const url = this.$basePath + '/api/media'
    const p: any = {}
    p.form = new FormData()
    // 上传文件
    opt = {
      ...opt,
      headers: {
        ...(opt && opt.headers),
        'Content-Type': 'multipart/form-data'
      }
    }
    // p.form = new FormData();
    if ('file' in params) p.form.append('file', params.file)
    ajax.check(params.file, 'file')
    p.data = data
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    })
  }
  /**
   * 通过抓取 url 上传文件
   * @summary 通过抓取 url 上传文件
   
   * @param data: ParamsBodyapiMediaUrlPost// request body
   * @param opt ajax config
   * @returns models.InlineResponse2002
   */
  public apiMediaUrlPost = (
    
    data: ParamsBodyapiMediaUrlPost,opt?: ExtraFetchParams
  ) : AjaxPromise<models.InlineResponse2002>  => {
    const url = this.$basePath + '/api/media/url'
    const p: any = {}
    p.data = data
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    })
  }
}

export default new MediaApi()