/**
 * Test swagger
 * Testing the Fastify swagger API
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import ajax, { AjaxPromise, ExtraFetchParams } from '@ajax'
import * as models from '../model/models'

/* tslint:disable:no-unused-variable member-ordering object-literal-shorthand */

/**
  * request body
  */
export type ParamsBodyapiWallLikePut = models.Data3
/**
  * @description apiWallListGet参数
  * @property `[pageNum]` 分页页码
  * @property `[pageSize]` 每页数量
  */
export interface ParamsapiWallListGet {
  // queryParams
  /**
   * 分页页码
   */
  pageNum?: string;
  /**
   * 每页数量
   */
  pageSize?: string;
}
/**
  * request body
  */
export type ParamsBodyapiWallPost = models.Data2

export class WallApi {
  protected $basePath = ''.replace(/\/$/, '')

  public constructor(basePath?: string) {
    if (basePath !== undefined) {
      this.$basePath = basePath.replace(/\/$/, '')
    }
  }

  /**
   * 点赞/取消 表白项
   * @summary 点赞/取消 表白项
   
   * @param data: ParamsBodyapiWallLikePut// request body
   * @param opt ajax config
   * @returns models.InlineResponse200
   */
  public apiWallLikePut = (
    
    data: ParamsBodyapiWallLikePut,opt?: ExtraFetchParams
  ) : AjaxPromise<models.InlineResponse200>  => {
    const url = this.$basePath + '/api/wall/like'
    const p: any = {}
    p.data = data
    return ajax.ajax({
      ...opt,
      method: 'PUT',
      url,
      ...p
    })
  }
  /**
   * 获取用户发布的表白项列表
   * @summary 获取用户发布的表白项列表
   * @param params ParamsapiWallListGet
   
   * @param opt ajax config
   * @returns models.InlineResponse2002
   */
  public apiWallListGet = (
    params: ParamsapiWallListGet,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.InlineResponse2002>  => {
    const url = this.$basePath + '/api/wall/list'
    const p: any = {}
    p.query = {}
    if ('pageNum' in params) p.query.pageNum = params.pageNum
    if ('pageSize' in params) p.query.pageSize = params.pageSize
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    })
  }
  /**
   * 新建表白墙
   * @summary 新建表白墙
   
   * @param data: ParamsBodyapiWallPost// request body
   * @param opt ajax config
   * @returns models.InlineResponse2003
   */
  public apiWallPost = (
    
    data: ParamsBodyapiWallPost,opt?: ExtraFetchParams
  ) : AjaxPromise<models.InlineResponse2003>  => {
    const url = this.$basePath + '/api/wall'
    const p: any = {}
    p.data = data
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    })
  }
}

export default new WallApi()